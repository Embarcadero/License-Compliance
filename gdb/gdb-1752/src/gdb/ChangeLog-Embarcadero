2017-08-09  Oleh Veretennikov <oleh.veretennikov@embarcadero.com>

	* c-valprint.c (c_val_print): add support for DW_AT_decimal_scale in
	C++ as it it in Pascal, fixing the evaluation of Delphi's
	System::Currency type.

2017-07-17  Oleh Veretennikov <oleh.veretennikov@embarcadero.com>
 
 	* infcall.c (fcw_scan_fcallwrapper): remove workaround made for
 	RS-45227, because it blocks execution of normal functions in Thumb
 	mode, generated by compiler.
	* gnu-v3-abi.c (gnuv3_pass_by_reference): add support for pointer in
	case we use Delphi classes in C++ (code taken from corresponding function
	in p-lang.c)

2017-07-03  Oleh Veretennikov <oleh.veretennikov@embarcadero.com>

	* valops.c(value_coerce_string): keep char width untouched for strings
	which are not the candidates of c_delphi_string_type

2017-06-30  Oleh Veretennikov <oleh.veretennikov@embarcadero.com>

	* arm-tdep.c (arm_pass_value_as_reference): 
	Let's use GNU ABI pass_by_reference definition (see gnu-v3-abi.c)  

2017-06-29  Oleh Veretennikov <oleh.veretennikov@embarcadero.com>

	* gdbtypes.h (c_delphi_string_type): add function declaration.
	* gdbtypes.c (c_delphi_string_type): add function definition. Used for
	checkig whether current type is one of Delphi ones:
	System::UnicodeString, System::AnsiString, System::RawByteString.
	* eval.c (evaluate_subexp_standard): for index operation "[]" process
	Delphi string came to C++ as array.
	* valarith.c (value_subscript): use coercion string to array for Delphi
	strings in C++.
	* valops.c (value_coerce_string): make coercion from string to array
	, in order this is Delphi string in C++. Update character type, if size of 
	character is 2.

2017-06-28  Dawn Perchik  <dperchik@embarcadero.com>

	* infcall.c (fcw_can_use_fcallwrapper): new: factor out the code which
	checks to see if we can use the Delphi RTL's function call wrapper from
	fcw_scan_fcallwrapper.  Add code to check if dbk_RTL_initialized is set
	to 1, meaning that the RTL has been initialized and is ready to handle
	exceptions.  Return 1 if the wrapper can be used.
	FIXME: code currently disabled for C++ due to regressions.
	* (fcw_scan_fcallwrapper): call fcw_can_use_fcallwrapper.
	* (fcw_can_call_function): new: check to see if the RTL will allow
	function calls.  For Pascal, this means checking for the symbol
	dbkFCallWrapperAddr.
	* (call_function_by_hand): call fcw_can_call_function to initially check
	if function calls are allowed.  Then call fcw_can_use_fcallwrapper later
	to see if the RTL's function call wrapper should be used.

2017-06-12  Oleh Veretennikov <oleh.veretennikov@embarcadero.com>

	* parse.c: add new operator support OP_PASCAL_UNDETERMINED_ARGLIST  
	* eval.c (evaluate_subexp_standard): add support of Pascal style
	addressing for multi-dimensional arrays. 
	* p-exp.y: add Bison rule for expression like expr[expr, arglist, ...]
	* value.h (value_subscripted_rvalue): add definition of  in order to be
	included in eval.c
	* valarith.c (value_subscripted_rvalue): remove function's static modifier
	* expression.h: add new operator definition OP_PASCAL_UNDETERMINED_ARGLIST

2017-05-19  Mykola Humeniak  <mykola.humeniak@embarcadero.com>

	* c-exp.y: Add support for MS built-in integer types (__int32, etc).

2017-05-19  Oleh Veretennikov  <oleh.veretennikov@embarcadero.com>

	* c-exp.y: Add enumerators for different kinds of integer literal
	suffixes.
	* (parse_number): Add support for MS integer literal suffixes (ui8,
	i16, etc.).

2017-03-30  Mykola Humeniak  <mykola.humeniak@embarcadero.com>

	* p-valprint.c (pascal_val_print): Correct representation of not
	initialized delphi dynamic array

2017-03-30  Oleh Veretennikov <oleh.veretennikov@embarcadero.com>
	* p-valprint.c (pascal_val_print): change condition for array of element
	wide char, when we force ellipses.

2017-03-22  Mykola Humeniak  <mykola.humeniak@embarcadero.com>

	* varobj.c (c_type_of_child): Implemented support of delphi dynamic array
	(correct determination of arrayâ€™s child type).

2017-03-08  Dawn Perchik  <dperchik@embarcadero.com>

	* p-typeprint.c (pascal_type_print_base): Don't call the C++ demangler unless
	the type's name begins with a '_'.

2017-03-02  Oleh Veretennikov  <oleh.veretennikov@embarcadero.com>

	* c-lang.c (c_get_string): be sure we do not read more than print_max + 1
	* c-valprint.c (c_val_print): use force_ellipsis for LA_PRINT_STRING and
	limit printed length
	* p-valprint.c (pascal_val_print): use print_max + 1 in order to avoid
	regresson with '...' in the end
	* valops.c (value_coerce_string): use print_max + 1 in order to avoid
	regresson with '...' in the end
	* valprint.c (read_string): use print_max + 1 everywhere we need to limit
	string
	* varobj.c (c_number_of_children): for Delphi dynamic array set length to
	print_max, if print_max less then length

2017-02-24  Dawn Perchik  <dperchik@embarcadero.com>

	* infcall.c (cleanup_fcallwrapper_info): New function to delete the
	fCall stack info.
	* (pop_current_fcw): If at the top of the fCall info stack, zero the
	breakpoints so we won't try to delete them again.
	* (call_function_by_hand): Fix compiler warning and initialize funcaddr
	used in error string.
	* inferior.h: Add prototype for cleanup_fcallwrapper_info.
	* target.c (generic_mourn_inferior): Call cleanup_fcallwrapper_info to
	delete and remove the fCall breakpoints from the bp_stats lists before
	they're found and deleted again in generic_mourn_inferior.
	* symtab.c (alloc_section_addr_info): Check for 0 num_sections before
	subtracting 1 when allocating (found by valgrind).

2017-02-23  Dawn Perchik  <dperchik@embarcadero.com>

	* top.c (print_gdb_version): Update copyright date to 2017.

2017-02-23  Dawn Perchik  <dperchik@embarcadero.com>

	* dwarf2read.c (check_inlined_function_calls, dwarf_decode_lines): Cast
	dir_index to int before checking if >= 0.

2017-02-17  Dawn Perchik  <dperchik@embarcadero.com>

	* dwarf2read.c (read_tag_Delphi_dynamic_array_type): New function
	which creates a new pointer for the target_type (instead of lookup up
	an existing one) so that we don't end up marking a normal pointer that
	is already in use by another symbol as a dynamic array.
	* (read_type_die_1): Change to call new function, and make sure dynarray
	flags are set properly.

2017-02-09  Dawn Perchik  <dperchik@embarcadero.com>

	Cleanup and fix compiler warnings.
	* c-valprint.c (c_val_print): Fix address used in error print.
	* eval.c (evaluate_subexp_standard): put parenthesis around operation to
	make compiler happy.
	* valops.c (search_struct_property): Make name a const pointer.
	* value.c: include math.h for prototype of pow.

2017-02-01  Dawn Perchik  <dperchik@embarcadero.com>

	* arm-tdep.c (arm_calling_convention_supported): return 1 for
	DW_CC_GNU_borland_fastcall_i386.

2015-06-14  Kirill Lapshin  <Kirill.Lapshin@embarcadero.com>

	* infcall.c (hand_function_call): Add support for Delphi class instances 
	(TBar*) as function result via struct return scheme.
	* p-lang.c (pascal_pass_by_reference): Add Delphi class instance support 
	for struct_return result.
	* arm-tdep.c (arm_return_value): Delphi class instance result described 
	as pointer to struct target type and may be recognized by target type 
	flag "delphiclass". Result passed via struct return scheme in this case.

2016-03-09  Dawn Perchik  <dperchik@embarcadero.com>

	* varobj.c (c_number_of_children): Return -1 if we can't get a valid
	value for a dynamic array.

2016-03-03  Dawn Perchik  <dperchik@embarcadero.com>

	* varobj.c (c_number_of_children): If we have a dynamic array, lookup
	up the count and return it.
	(c_make_name_of_child, c_value_of_child, should_display_contents,
	c_value_of_variable): Treat dynamic arrays like static arrays.

2016-02-29  Dawn Perchik  <dperchik@embarcadero.com>

	* dwarf2read.c (read_type_die): Flag the pointer with
	TYPE_FLAG_DELPHI_DYNARRAY if it is a Delphi dynamic array.
	* gdbtypes.h: Add TYPE_FLAG_DELPHI_DYNARRAY, TYPE_DELPHI_DYNARRAY.
	* p-typeprint.c (pascal_type_print_varspec_prefix): Print the type for
	a dynamic array as "array of subtype".
	* p-valprint.c (pascal_val_print): If a pointer is a Delphi dynamic
	array, read its length and print it as an array.

2016-02-09  Kirill Lapshin  <Kirill.Lapshin@embarcadero.com>

	Fix ARM32 ABI conformance for *ExcNotify RTL's passed Handler address
	must be read from stack as 5th parameter and cdecl CC used.
	* breakpoint.c (print_it_typical): Change handler address parameter
	read. Remove path for RTL syms used for getting *ExcNotify parameters
	with block syms due to *ExcNotify export sym used only and breakpoint
	set before *ExcNotify() prologue always, at first instruction.
	* charset.c (find_charset_names): Use host iconv executable for getting
	list of available charsets instead of iconvlist library call.

2016-01-19  Kirill Lapshin  <Kirill.Lapshin@embarcadero.com>

	Fix evaluation of class/record fields with String type.
	* p-valprint.c (pascal_object_print_value_fields): Pass valaddr as NULL 
	to address if field type is TYPE_CODE_STRING.
	(pascal_val_print): Use valaddr pointer instead of address parameter for
	String type if valaddr is not NULL - this means it is debugger address
	space pointer to target pointer to String data.

2016-01-14  Dawn Perchik  <dperchik@embarcadero.com>

	* top.c: Update copyright date to 2016.

2016-01-05  Dawn Perchik  <dperchik@embarcadero.com>

	* varobj.c (should_display_contents): Expand the contents when
	displaying the Delphi return type Currency.

2016-01-05  Dawn Perchik  <dperchik@embarcadero.com>

	* c-typeprint.c (c_print_typename_possibly_quoted): Don't put quotes around types.

2015-12-24  Kirill Lapshin  <Kirill.Lapshin@embarcadero.com>

	GDB must exit on any error critical for initial app launch phase (autotests).
	* utils.c (internal_error_problem): Set auto exit on any internal errors.
	* remote.c (remote_macosx_create_inferior): Use timeouted wait for debugserver
	reply to app and args sent packet.

2015-12-15  Kirill Lapshin  <Kirill.Lapshin@embarcadero.com>

	* utils.c (do_my_cleanups): Check against cleanup chain may have NULL pointers.
	* remote.c (remote_macosx_create_inferior): Increase remote packet size default
	to 4 kbytes (was 2000 bytes). Allocate exe_and_args_buffer with doubled size
	to calculated to fix issue with crashed on its cleanup due to possible writes
	beyound buffer high boundary. Fast fix.

2015-12-03  Kirill Lapshin  <Kirill.Lapshin@embarcadero.com>

	* infcall.c (fcw_scan_fcallwrapper): Increase high scan window boundary in
	accordance with compiler codegen changes. We can't use exact wrapper AT_high 
	value because we have exported sym (AT_low) only.

2015-11-25  Dawn Perchik  <dperchik@embarcadero.com>

	* dwarf2read.c (read_type_die): Treat Delphi sets and dynarrays as pointers as
	temporary workarounds for crashes.

2015-10-29  Kirill Lapshin  <Kirill.Lapshin@embarcadero.com>

	* infcall.c (hand_function_call): WORKAROUND against N_SECT Thumb bit bug -  
	Use global g_examine_i_size variable to force Thumb disasm mode for __dbk_fcall_wrapper 
	Delphi RTL function.

2015-08-18  Kirill Lapshin  <Kirill.Lapshin@embarcadero.com>

	* infcall.c (hand_function_call): Additional checks (function use Delphi ABI and 
	current language is Delphi) for fix for case if function expect dereferenced pointer 
	to Delphi string (i.e. - string passed passed by "value". Unused variables removed.

2015-08-13  Kirill Lapshin  <Kirill.Lapshin@embarcadero.com>

	* infcall.c (hand_function_call): Fix for case if function expect Delphi string
	passed by "value" - function formal parameter type does not have associated pointer 
	or/and reference type - this means parameter must be passed by value exactly. 
	The value we're going to pass is the dereferenced pointer to pointer to string chars
	which representing Delphi string passed by "value".

2015-08-07  Kirill Lapshin  <Kirill.Lapshin@embarcadero.com>

	* varobj.c (varobj_update): Always re-evaluate string contents on 
	update like new for current scope. No method for members values 
	changed detection if stack depth still same since last bkpt.
	Case may happen if scope (frame) not changed since last breakpoint.

2015-06-15  Dawn Perchik  <dperchik@embarcadero.com>

	* dwarf2read.c (set_cu_language): Add support for DW_LANG_BORLAND_Delphi
	and treat Delphi language as Pascal.

2015-02-27  Kirill Lapshin  <Kirill.Lapshin@embarcadero.com>

	* arm-tdep.c (arm_return_value): Reworked fix for Delphi record result 
	use struct return for struct type with length bigger than arch reg size, 
	otherwise - register calling convention.

2015-02-20  Kirill Lapshin  <Kirill.Lapshin@embarcadero.com>

	* arm-tdep.c (arm_return_value): Delphi record result use struct returns 
	for struct type with length bigger than arch reg size, otherwise - register
	calling convention.

2015-02-19  Kirill Lapshin  <Kirill.Lapshin@embarcadero.com>

	* infcall.c (hand_function_call): Do RTL init check only if current 
	language set as pascal (Delphi). Embarcadero Delphi RTL specific only.

2015-02-18  Kirill Lapshin  <Kirill.Lapshin@embarcadero.com>

	* infcall.c (hand_function_call): Search for the fCall wrapper address 
	symbol "dbkFCallWrapperAddr", then check dereferenced value as int* - 
	if NULL - abort fCall, Delphi RTL not initialized at current breakpoint.
	Embarcadero Delphi RTL specific only.

2015-02-09  Kirill Lapshin  <Kirill.Lapshin@embarcadero.com>

	* infcall.c (hand_function_call): Rework fix case if user set breakpoint 
	at fCall dummy ret addr - reuse existing bkpt in this case.
	Other user breakpoints left untouched. As we use bkpt at entry addr user
	breakpoint may be removed - always passed at moment of fCall and cannot be
	part of loop statement for sure.

2015-02-03  Dawn Perchik  <dperchik@embarcadero.com>

	* c-exp.y (parse_number): Move call to tolower after test to see
	if at end, so that float suffixes like 3.01L will work.

2015-02-03  Kirill Lapshin  <Kirill.Lapshin@embarcadero.com>

	* breakpoint.c (find_breakpoint_by_line_and_file_name): New helper function 
	for finding breakpoint by line and source file name.
	* breakpoint.h (find_breakpoint_by_line_and_file_name): New prototype.
	* infcall.c (hand_function_call): Check against user breakpoint set at
	function call return address at app entry - if so, delete user 
	breakpoint to avoid function call stuck on user breakpoint in dummy 
	frame after successful completion. Now duplicates by line and source line
	also deleted. Other user breakpoints left untouched.

2015-02-02  Kirill Lapshin  <Kirill.Lapshin@embarcadero.com>

	* breakpoint.c (find_breakpoint_by_location_addr): New helper function 
	for finding breakpoint with location corresponding to given target
	address.
	* breakpoint.h (find_breakpoint_by_location_addr): New prototype.
	* infcall.c (hand_function_call): Check against user breakpoint set at
	function call return address at app entry - if so, delete user 
	breakpoint to avoid function call stuck on user breakpoint in dummy 
	frame after successful completion.

2015-01-28  Kirill Lapshin  <Kirill.Lapshin@embarcadero.com>

	* value.c (value_from_longest): Temporary fix against
	GDB crash on badly formed string info (bad length).

2014-10-13  Dawn Perchik  <dperchik@embarcadero.com>

	* dwarf2read.c (process_die, read_type_die): Add support for
	DW_TAG_BORLAND_Delphi_string; handle same as DW_TAG_string_type.

2014-10-13  Dawn Perchik  <dperchik@embarcadero.com>

	* ../include/elf/dwarf2.h (DW_AT_BORLAND_closure,
	DW_TAG_BORLAND_Delphi_string, DW_TAG_BORLAND_Delphi_dynamic_array,
	DW_TAG_BORLAND_Delphi_set, DW_TAG_BORLAND_Delphi_variant):
	New DWARF extensions for Delphi types.
	* dwarf2read.c (dwarf_tag_name, dwarf_attr_name):
	Strings for new DWARF extensions.

2014-10-13  Dawn Perchik  <dperchik@embarcadero.com>

	* value.c (coerce_array): Call value_coerce_array after converting a
	string to an array.

2014-08-18  Kirill Lapshin  <Kirill.Lapshin@embarcadero.com>

	* infcall.c (hand_function_call): Fix problem with debuggee crash
	in fCall due to RTL string type cleaner function tries to use already
	non-valid string record data at struct_addr address. Result length
	calculation corrected for making sure in case when result returned by 
	value at struct_addr. For making sure we should calculate max possible 
	result length to fit result. Result buffer cleanup added - it must be 
	zeroed to eliminate problems with RTL string cleanup functions.

2014-08-15  Dawn Perchik  <dperchik@embarcadero.com>

	* p-exp.y (pascal_lex): Don't try to lookup the string as a symtab if
	we already have a type we are completing, otherwise, if we have a file
	named "typeinfo", we will think "TypeInfo" in "v.TypeInfo.Kind" refers
	to a symtab instead of a field.

2014-08-14  Dawn Perchik  <dperchik@embarcadero.com>

	* dwarf2read.c (process_die): If a typedef has no name, set it
	to that of its corresponding symbol.

2014-08-12  Kirill Lapshin  <Kirill.Lapshin@embarcadero.com>

	* arm-tdep.c (arm_return_value): Fix struct_return pattern recognizing
	failure in fCall due to Delphi_fastcall calling convention has top priority 
	for using register result under explicit delphi record type flag set for
	result by compiler in arm_vfp_abi_for_function. 
	Actually, Delphi record flag has top priority to enable struct return.

2014-08-12  Kirill Lapshin  <Kirill.Lapshin@embarcadero.com>
	
	* p-valprint.c (pascal_object_print_value_fields): Fix problem with
	pascal string fields in record printed as {...}, i.e. - string fields
	now expanded unconditionally.

2014-08-04  Dawn Perchik  <dperchik@embarcadero.com>

	* varobj.c (should_display_contents): Return 1 if it's an array
	and print option expand_aggregates is set.

2014-07-24  Kirill Lapshin  <Kirill.Lapshin@embarcadero.com>

	Additional checks against dir_index in file entry (buggy line table) 
	may be invalid or number or include dirs may be invalid which may
	cause GDB crash on segment violation during execution of line program
	statements related to directories and files. Additional checks against
	file index should be less or equal to number of files written in 
	line header.
	* dwarf2read.c (check_inlined_function_calls): Checks added - 
	fe->dir_index should be less or equal to lh->num_include_dirs,
	file_index should be less or equal to lh->num_file_names.
	(dwarf_decode_lines): Check added - fe->dir_index should be less or equal 
	to lh->num_include_dirs, file_index should be less or equal to 
	lh->num_file_names.

2014-07-23  Kirill Lapshin  <Kirill.Lapshin@embarcadero.com>

	Additional checks against dir_index in file entry (buggy line table) 
	may be invalid or number or include dirs may be invalid which may
	cause GDB crash on segment violation during execution of line program
	statements related to directories and files.
	* dwarf2read.c (dwarf_decode_lines): Check added - fe->dir_index should 
	be less or equal to lh->num_include_dirs.

2014-07-04  Kirill Lapshin  <Kirill.Lapshin@embarcadero.com>

	Fix issue with stack arguments not passed in fCall correctly.
	iOS 8.x WORKAROUND: X pkt serviced wrong in latest Beta debugserver. 
	We will use M packet instead, for a while. iOS 6.x and iOS 7.x
	debugservers just not offer X pkt for use.
	* remote.c (remote_write_bytes): Don't use X packet while it may
	be serviced buggy.

2014-07-03  Kirill Lapshin  <Kirill.Lapshin@embarcadero.com>

	Fix fCall regression appeared in case debugserver major version < 310.
	Was caused by lack of debugserver version check in VFP renumbering
	"hack". Debugserver has changed VFP regs numbers only since major 
	ver 310 or around.
	* remote.c (remote_macosx_get_all_image_infos_addr): Getting
	debugserver version via new qGDBServerVersion packet.
	(fetch_register_using_p): Check debugserver version before 
	choose VFP register renumbering hack.
	(store_register_using_P): Check debugserver version before 
	choose VFP register renumbering hack.

2014-07-02  Kirill Lapshin  <Kirill.Lapshin@embarcadero.com>

	Fix problem with setting and getting correct VFP register values,
	including fCall with float point arguments. Problem was caused by
	GDB and debugserver use different numbering for VFP Sx registers in
	set/get reg RSP protocol P/p packets. Internal GDB regs numbering
	left without changes.
	* arm-tdep.c (arm_vfp_abi_for_function): Enable parameters passing
	via VFP registers in case function CC is DW_CC_BORLAND_fastcall.
	* regcache.c (init_regcache_descr): Remove NUM_REGS hack as not needed. 
	* remote.c (init_remote_state): Remove NUM_REGS hack as not needed. 
	(packet_reg_from_regnum): Remove NUM_REGS hack as not needed.
	(fetch_register_using_p): VFP register renumbering for debugserver.
	(remote_fetch_registers): Remove NUM_REGS hack as not needed.
	(store_register_using_P): VFP register renumbering for debugserver.
	(remote_store_registers): Remove NUM_REGS hack as not needed.

2014-06-30  Dawn Perchik  <dperchik@embarcadero.com>

	* arm-tdep.c (arm_push_actual_fw_args): Handle VFP ABI.
	Merge git commit 34115aebb2c8a35581651236615e63992a521131
	from gdb trunk for VFP support:
	2009-07-28  Joseph Myers  <joseph@codesourcery.com>
	* arm-tdep.c (enum arm_vfp_cprc_base_type,
	arm_vfp_cprc_unit_length, arm_vfp_cprc_reg_char,
	arm_vfp_cprc_sub_candidate, arm_vfp_call_candidate,
	arm_vfp_abi_for_function): New.
	(arm_push_dummy_call): Handle VFP ABI.
	(arm_extract_return_value, arm_store_return_value): Handle
	ARM_FLOAT_VFP case.
	(arm_return_value): Handle VFP ABI.
	(arm_gdbarch_init): Default fp_model based on Tag_ABI_VFP_args for
	EABI binaries.

2014-06-27  Dawn Perchik  <dperchik@embarcadero.com>

	* charset.c (validate): If "wchar_t" is used as the intermediate
	encoding and the host charset is "UTF-8", set the locale for LC_CTYPE
	to "UTF-8" so iconv will work correctly.

2014-06-23  Dawn Perchik  <dperchik@embarcadero.com>

	Add Delphi UTF support.
	* c-lang.c (classify_type): Make external.  Check width of type.
	Treat Delphi char as char16_t.
	(append_string_as_wide): Make external.
	* c-lang.h (classify_type, append_string_as_wide):
	Add prototypes.
	* p-lang.c: Include c-lang.h and gdb_obstack.h.
	(pascal_one_char): Add type parameter.  Rewrite as Pascal version
	of c-lang's c_emit_wchar().
	(pascal_printstr): Rewrite as Pascal version of c-lang's c_printstr().
	(pascal_print_wchar): New: Pascal version of c-lang's print_wchar().
	(pascal_emit_char, pascal_printchar): Pass type to pascal_one_char(),
	and don't add ending ' (pascal_one_char() now does that for us).
	* charset.h (get_nbytes_in_wchar): Add prototype.
	* charset.c (get_nbytes_in_wchar): Export, and rename from
	get_nbytes_in_char.
	* utils.c (fputstr_unfiltered): Print all bytes of a UTF-8
	Unicode character.

2014-06-17  Dawn Perchik  <dperchik@embarcadero.com>

	Workaround for iconv infinite loop bug 5277:
	https://sourceware.org/bugzilla/show_bug.cgi?id=5277
	* charset.c (wchar_iterate): If input is Unicode encoding, make sure
	we always have enough bytes in the input buffer to hold the Unicode
	character, using our own buffer if needed.
	(struct wchar_iterator): Add encoding.
	(make_wchar_iterator): Copy encoding to wchar_iterator.
	(get_nbytes_in_char): New: If a UTF encoding is used, return the number
	of bytes belonging to the next character, else return 0.

2014-06-13  Dawn Perchik  <dperchik@embarcadero.com>

	* copying.c (show_copying_command, show_warranty_command): Update to
	use info from GPLv3 versions of gdb, since we now include sources
	from them. 

2014-06-11  Dawn Perchik  <dperchik@embarcadero.com>

	* varobj.c (c_value_of_variable): Disable code to strip empty wrappers
	off delphireturn structs with 1 field, as  this causes us to lose
	information, such as the name of the original type.

2014-06-09  Dawn Perchik  <dperchik@embarcadero.com>

	* varobj.c (should_display_contents): Always display the
	contents of C strings when using MI commands.

2014-06-04  Dawn Perchik  <dperchik@embarcadero.com>

	Merge git commit 330b1887ba8f476292554c7fbe128a76358c9e10
	from gdb trunk for wide char support:
	2010-04-22  Pierre Muller  <muller@ics.u-strasbg.fr>
	* gdbtypes.h (builtin_type): Add builtin_char16 and builtin_char32
	fields.
	* gdbtypes.c (gdbtypes_post_init): Set builtin_char16 and 
	builtin_char32 fields.
	* printcmd.c (decode_format): Set char size to '\0'
	for strings unless explicit size is given.
	(print_formatted): Correct calculation of NEXT_ADDRESS
	for 16 or 32 bit strings.
	(do_examine): Do not force byte size for strings.
	Use builtin_char16 and builtin_char32 types to display
	16 or 32 bit-wide strings. 
	(x_command): Set LAST_SIZE to 'b' for string type.

2014-06-04  Dawn Perchik  <dperchik@embarcadero.com>

	Merge git commit 75da1533d288a1323b7c8a32ce828c76fd9115f6
	from gdb trunk for wide char support:
	2009-04-14  Jan Kratochvil  <jan.kratochvil@redhat.com>
	* c-lang.c (c_get_string): Fix xfree crash on a failed string read.

2014-06-04  Dawn Perchik  <dperchik@embarcadero.com>

	Merge git commit 921a68642a1c448a85ae5c4acd78f84a29c45e2f
	from gdb trunk for wide char support:
	2009-06-23  Tom Tromey  <tromey@redhat.com>
	PR gdb/10309:
	* c-lang.c (classify_type): Iterate over typedefs.
	* c-valprint.c (textual_element_type): Iterate over typedefs.

2014-06-04  Dawn Perchik  <dperchik@embarcadero.com>

	Merge git commit 2942c31d92f2c1544e4acef3bf431edbb0d28a8c
	from gdb trunk for wide char support:
	2009-06-23  Tom Tromey  <tromey@redhat.com>
	PR gdb/10309:
	* c-lang.c (classify_type): Iterate over typedefs.
	* c-valprint.c (textual_element_type): Iterate over typedefs.

2014-06-04  Dawn Perchik  <dperchik@embarcadero.com>

	Merge parts of git commit e606e6552fc3fa19c9bac2c97969697bfdc44fe4
	from gdb trunk for wide char support:
	2009-07-10 Phil Muldoon  <pmuldoon@redhat.com>
	* c-lang.c (c_get_string): If the length parameter is specified,
	use that. Return value in characters. Update comments.
	* language.h: Update c_get_string prototype comments.

2014-06-04  Dawn Perchik  <dperchik@embarcadero.com>

	Merge git commit da7c65d49b6ee5023a24d1ebe6435978f8ece353
	from gdb trunk for wide char support:
	2009-09-25  Tom Tromey  <tromey@redhat.com>
	PR python/10664:
	* language.h (struct language_defn) <la_get_string>: Add
	'char_type' argument.
	(LA_GET_STRING): Likewise.
	(default_get_string, c_get_string): Update.
	* language.c (default_get_string): Add 'char_type' argument.
	* c-valprint.c (c_textual_element_type): Rename from
	textual_element_type.  No longer static.  Update callers.
	* c-lang.h (c_textual_element_type): Declare.
	* c-lang.c (c_get_string): Add 'char_type' argument.

2014-06-04  Dawn Perchik  <dperchik@embarcadero.com>

	Merge git commit 8c02d52572abb3ecb65f30d2e1084c4366b2d084
	from gdb trunk for wide char support:
	2009-02-05  Thiago Jung Bauermann  <bauerman@br.ibm.com>
	* language.h (language_dfn): Add la_get_string member.
	(LA_GET_STRING): New macro.
	(default_get_string): New prototype.
	* language.c (default_get_string): New function.
	(unknown_language_defn, auto_language_defn, local_language_defn): Use
	default_get_string for la_get_string.
	* c-lang.c (c_get_string): New function.
	(c_language_defn, cplus_language_defn, asm_language_defn): Use
	c_get_string for la_get_string.
	(minimal_language_defn): Likewise
	* ada-lang.c (ada_language_defn): Likewise.
	* f-lang.c (f_language_defn): Use default_get_string for
	la_get_string.
	* jv-lang.c (java_language_defn): Likewise.
	* m2-lang.c (m2_language_defn): Likewise.
	* objc-lang.c (objc_language_defn): Likewise.
	* p-lang.c (p_language_defn): Likewise.
	* scm-lang.c (scm_language_defn): Likewise.
	* typeprint.c (type_to_string): New function.
	* value.h (type_to_string): New prototype.
	* valprint.c (val_print_string): Factor out code for reading string
	from the inferior into its own function.  Put 2 spaces after period
	in comments.
	(read_string): New function.
	* valprint.h (read_string): New prototype.

2014-06-04  Dawn Perchik  <dperchik@embarcadero.com>

	Merge git commit 3824ad86b68be50184e124cebabfb608dab2c744
	from gdb trunk for wide char support:
	2009-09-25  Tom Tromey  <tromey@redhat.com>
	* charset.c (iconv_open): Use UTF-16 and UTF-32, not UCS-2 and
	UCS-4.
	(iconv): Rename 'ucs_flag'.
	(GDB_DEFAULT_TARGET_WIDE_CHARSET): Use UTF-32.
	* c-lang.c (charset_for_string_type): Use UTF-16 and UTF-32, not
	UCS-2 and UCS-4.
	(convert_ucn): Use UTF-32.

2014-06-04  Dawn Perchik  <dperchik@embarcadero.com>

	Merge git commit 821907ff852b193d7eab11a1bf1ac48d1cd5d2b3
	from gdb trunk for wide char support:
	2009-09-21  Phil Muldoon <pmuldoon@redhat.com>
	PR python/10633
	* c-lang.c (c_printstr): Do not loop past  options->print_max when
	iterating with wchar_iterate.

2014-06-04  Dawn Perchik  <dperchik@embarcadero.com>

	Merge git commit ca77bad7ce2f59d73fa34fcbc9143a14cab00343
	from gdb trunk for wide char support:
	2009-07-07  Tom Tromey  <tromey@redhat.com>
	* c-lang.c (convert_octal): Only allow 3 octal digits.
	(print_wchar): Prefer 3-digit octal form.  Fall back to hex if
	needed.
	* c-exp.y (c_parse_escape): Only allow 3 octal digits.

2014-06-03  Dawn Perchik  <dperchik@embarcadero.com>

	Merge git commit 536fc59e543c616009a57fcd5a931f09d000f8d9
	from gdb trunk for wide char support:
	2009-07-02  Ulrich Weigand  <uweigand@de.ibm.com>
	* printcmd.c (next_gdbarch): New static variable.
	(set_next_address, do_examine, x_command): Set it.
	(decode_format): Use 'a' size to indicate width of an address.
	(do_examine): Add GDBARCH argument.  Handle 'a' size.
	(x_command): Pass architecture to do_examine.
	Error if called without argument the first time.  
	(do_one_display): Pass architecture to do_examine.
	(examine_i_type, examine_b_type, examine_h_type, examine_w_type,
	examine_g_type): Remove.
	(_initialize_printcmd): Do not initialize them.
	(do_examine): Use builin_type_int... instead of examine_..._type.

	Merge git commit 6754a44b069f5a1c90893c8d95c2bcaa02142045
	from gdb trunk for wide char support:
	2009-05-13  Joel Brobecker  <brobecker@adacore.com>
	* c-lang.c (print_wchar): Remove unnecessary cast.

	Merge git commit 559448dc279fb449f578077e053e504c2b19a007
	from gdb trunk for wide char support:
	2009-05-12  Joel Brobecker <brobecker@adacore.com>
	* c-lang.c (print_wchar): Convert w into a gdb_wchar_t before
	pushing it on the output obstack.

	Merge git commit dba9606f12dde0dbf9fd783be49eb3be772159bf
	from gdb trunk for wide char support:
	2009-04-14  Tom Tromey  <tromey@redhat.com>
	* c-lang.c (c_emit_char): Use INTERMEDIATE_ENCODING.
	(c_printstr): Likewise.
	* charset.c: Include gdb_wait.h.
	(make_wchar_iterator): Use INTERMEDIATE_ENCODING.
	(find_charset_names): Use pexecute.  Handle libiconv's output.
	Detect errors.
	(_initialize_charset): Use xstrdup.
	* gdb_wchar.h: Check HAVE_BTOWC.  Split PHONY_ICONV and wchar
	cases.
	(INTERMEDIATE_ENCODING): New define.
	* configure, config.in: Rebuild.
	* configure.ac: Check for btowc.

2014-06-03  Dawn Perchik  <dperchik@embarcadero.com>

	Merge git commit def11321ca8c02fcbed75eeacffe7aa5d67627bc
	from gdb trunk for wide char support:
	2009-04-15  Tom Tromey  <tromey@redhat.com>
	* c-lang.c (evaluate_subexp_c): Correctly handle EVAL_SKIP.

2014-06-03  Dawn Perchik  <dperchik@embarcadero.com>

	Merge git commit c7bc5037bfc0ec52079c9e31a7186e51c4792e79
	from gdb trunk for wide char support:
	2009-03-23  Tom Tromey  <tromey@redhat.com>
	* charset.c (ICONV_CONST) <PHONY_ICONV>: Define.
	(iconv): Make 'inbuf' argument const.
	(convert_between_encodings): Use ICONV_CONST.
	(wchar_iterate): Likewise.

2014-05-19  Dawn Perchik  <dperchik@embarcadero.com>

	Merge git commit c3859a48f970c7d05147ad7695ec04c34a0fb216
	from gdb trunk for wide char support:
	2009-03-20  Tom Tromey  <tromey@redhat.com>
	Julian Brown  <julian@codesourcery.com>
	PR i18n/7220, PR i18n/7821, PR exp/8815, PR exp/9103,
	PR i18n/9401, PR exp/9613:
	* NEWS: Update
	* value.h (value_typed_string): Declare.
	(val_print_string): Update.
	* valprint.h (print_char_chars): Update.
	* valprint.c (print_char_chars): Add type argument.  Update.
	(val_print_string): Likewise.
	* valops.c (value_typed_string): New function.
	* utils.c (host_char_to_target): New function.
	(parse_escape): Use host_char_to_target, host_hex_value.  Update.
	Remove '^' case.
	(no_control_char_error): Remove.
	* typeprint.c (print_type_scalar): Update.
	* scm-valprint.c (scm_scmval_print): Update.
	* scm-lang.h (scm_printchar, scm_printstr): Update.
	* scm-lang.c (scm_printchar): Add type argument.
	(scm_printstr): Likewise.
	* printcmd.c (print_formatted): Update.
	(print_scalar_formatted): Update.
	(printf_command) <wide_string_arg, wide_char_arg>: New constants.
	Handle '%lc' and '%ls'.
	* parser-defs.h (struct typed_stoken): New type.
	(struct stoken_vector): Likewise.
	(write_exp_string_vector): Declare.
	* parse.c (write_exp_string_vector): New function.
	* p-valprint.c (pascal_val_print): Update.
	* p-lang.h (is_pascal_string_type, pascal_printchar,
	pascal_printstr): Update.
	* p-lang.c (is_pascal_string_type): Remove 'char_size' argument.
	Add 'char_type' argument.
	(pascal_emit_char): Add type argument.
	(pascal_printchar): Likewise.
	(pascal_printstr): Likewise.
	* objc-lang.c (objc_emit_char): Add type argument.
	(objc_printchar): Likewise.
	(objc_printstr): Likewise.
	* macroexp.c (get_character_constant): Handle unicode characters.
	Use c_parse_escape.
	(get_string_literal): Handle unicode strings.  Use
	c_parse_escape.
	* m2-valprint.c (print_unpacked_pointer): Update.
	(m2_print_array_contents): Update.
	(m2_val_print): Update.
	* m2-lang.c (m2_emit_char): Add type argument.
	(m2_printchar): Likewise.
	(m2_printstr): Likewise.
	* language.h (struct language_defn) <la_printchar>: Add type
	argument.
	<la_printstr, la_emitchar>: Likewise.
	(LA_PRINT_CHAR): Likewise.
	(LA_PRINT_STRING): Likewise.
	(LA_EMIT_CHAR): Likewise.
	* language.c (unk_lang_emit_char): Add type argument.
	(unk_lang_printchar): Likewise.
	(unk_lang_printstr): Likewise.
	* jv-valprint.c (java_val_print): Update.
	* jv-lang.c (java_emit_char): Add type argument.
	* f-valprint.c (f_val_print): Update.
	* f-lang.c (f_emit_char): Add type argument.
	(f_printchar): Likewise.
	(f_printstr): Likewise.
	* expprint.c (print_subexp_standard): Update.
	* charset.h (target_wide_charset): Declare.
	(c_target_char_has_backslash_escape, c_parse_backslash,
	host_char_print_literally, host_char_to_target,
	target_char_to_host, target_char_to_control_char): Remove.
	(enum transliterations): New type.
	(convert_between_encodings): Declare.
	(HOST_ESCAPE_CHAR): New define.
	(host_letter_to_control_character, host_hex_value): Declare.
	(enum wchar_iterate_result): New enum.
	(struct wchar_iterator): Declare.
	(make_wchar_iterator, make_cleanup_wchar_iterator, wchar_iterator,
	wchar_push_back): Declare.
	* charset-list.h: New file.
	* c-valprint.c (textual_name): New function.
	(textual_element_type): Handle wide character types.
	(c_val_print): Pass original type to textual_element_type.  Handle
	wide character types.
	(c_value_print): Use textual_element_type.  Pass original type of
	value to val_print.
	* c-lang.h (enum c_string_type): New type.
	(c_printchar, c_printstr): Update.
	* c-lang.c (classify_type): New function.
	(print_wchar): Likewise.
	(c_emit_char): Add type argument.  Handle wide characters.
	(c_printchar): Likewise.
	(c_printstr): Add type argument.  Handle wide and multibyte
	character sets.
	(convert_ucn): New function.
	(emit_numeric_character): Likewise.
	(convert_octal): Likewise.
	(convert_hex): Likewise.
	(ADVANCE): New macro.
	(convert_escape): New function.
	(parse_one_string): Likewise.
	(evaluate_subexp_c): Likewise.
	(exp_descriptor_c): New global.
	(c_language_defn): Use exp_descriptor_c.
	(cplus_language_defn): Likewise.
	(asm_language_defn): Likewise.
	(minimal_language_defn): Likewise.
	(charset_for_string_type): New function.
	* c-exp.y (%union): Add 'svec' and 'tsval'.
	(CHAR): New token.
	(exp): Add CHAR production.
	(string_exp): Rewrite.
	(exp) <string_exp>: Rewrite.
	(tempbuf): Now global.
	(tempbuf_init): New global.
	(parse_string_or_char): New function.
	(yylex) <tempbuf>: Now global.
	<tokptr, tempbufindex, tempbufsize, token_string, class_prefix>:
	Remove.
	Handle 'u', 'U', and 'L' prefixes.  Call parse_string_or_char.
	(c_parse_escape): New function.
	* auxv.c (fprint_target_auxv): Update.
	* ada-valprint.c (ada_emit_char): Add type argument.
	(ada_printchar): Likewise.
	(ada_print_scalar): Update.
	(printstr): Add type argument.  Update calls to ada_emit_char.
	(ada_printstr): Add type argument.
	(ada_val_print_array): Update.
	(ada_val_print_1): Likewise.
	* ada-lang.c (emit_char): Add type argument.
	* ada-lang.h (ada_emit_char, ada_printchar, ada_printstr): Add
	type arguments.
	* gdb_locale.h: Include langinfo.h.
	* charset.c (_initialize_charset): Set default host charset from
	the locale.  Don't register charsets.  Add target-wide-charset
	commands.  Call find_charset_names.
	(struct charset, struct translation): Remove.
	(GDB_DEFAULT_HOST_CHARSET): Remove.
	(GDB_DEFAULT_TARGET_WIDE_CHARSET): New define.
	(target_wide_charset_name): New global.
	(show_host_charset_name): Handle "auto".
	(show_target_wide_charset_name): New function.
	(host_charset_enum, target_charset_enum): Remove.
	(charset_enum): New global.
	(all_charsets, register_charset, lookup_charset, all_translations,
	register_translation, lookup_translation): Remove.
	(simple_charset, ascii_print_literally, ascii_to_control): Remove.
	(iso_8859_print_literally, iso_8859_to_control,
	iso_8859_family_charset): Remove.
	(ebcdic_print_literally, ebcdic_to_control,
	ebcdic_family_charset): Remove.
	(struct cached_iconv, check_iconv_cache, cached_iconv_convert,
	register_iconv_charsets): Remove.
	(target_wide_charset_be_name, target_wide_charset_le_name): New
	globals.
	(identity_either_char_to_other): Remove.
	(set_be_le_names, validate): New functions.
	(backslashable, backslashed, represented): Remove.
	(default_c_target_char_has_backslash_escape): Remove.
	(default_c_parse_backslash, iconv_convert): Remove.
	(ascii_to_iso_8859_1_table, ascii_to_ebcdic_us_table,
	ascii_to_ibm1047_table, iso_8859_1_to_ascii_table,
	iso_8859_1_to_ebcdic_us_table, iso_8859_1_to_ibm1047_table,
	ebcdic_us_to_ascii_table, ebcdic_us_to_iso_8859_1_table,
	ebcdic_us_to_ibm1047_table, ibm1047_to_ascii_table,
	ibm1047_to_iso_8859_1_table, ibm1047_to_ebcdic_us_table): Remove.
	(table_convert_char, table_translation, simple_table_translation):
	Remove.
	(current_host_charset, current_target_charset,
	c_target_char_has_backslash_escape_func,
	c_target_char_has_backslash_escape_baton): Remove.
	(c_parse_backslash_func, c_parse_backslash_baton): Remove.
	(host_char_to_target_func, host_char_to_target_baton): Remove.
	(target_char_to_host_func, target_char_to_host_baton): Remove.
	(cached_iconv_host_to_target, cached_iconv_target_to_host):
	Remove.
	(lookup_charset_or_error, check_valid_host_charset): Remove.
	(set_host_and_target_charsets): Remove.
	(set_host_charset, set_target_charset): Remove.
	(set_host_charset_sfunc, set_target_charset_sfunc): Rewrite.
	(set_target_wide_charset_sfunc): New function.
	(show_charset): Print target wide character set.
	(host_charset, target_charset): Rewrite.
	(target_wide_charset): New function.
	(c_target_char_has_backslash_escape): Remove.
	(c_parse_backslash): Remove.
	(host_letter_to_control_character): New function.
	(host_char_print_literally): Remove.
	(host_hex_value): New function.
	(target_char_to_control_char): Remove.
	(cleanup_iconv): New function.
	(convert_between_encodings): New function.
	(target_char_to_host): Remove.
	(struct wchar_iterator): Define.
	(make_wchar_iterator, make_cleanup_wchar_iterator, wchar_iterator,
	wchar_push_back): New functions.
	(do_cleanup_iterator): New function.
	(char_ptr): New typedef.
	(charsets): New global.
	(add_one, find_charset_names): New functions.
	(default_charset_names): New global.
	(auto_host_charset_name): Likewise.
	* aclocal.m4, config.in, configure: Rebuild.
	* configure.ac: Call AM_LANGINFO_CODESET.
	(GDB_DEFAULT_HOST_CHARSET): Default to UTF-8.
	(AM_ICONV): Invoke earlier.
	* acinclude.m4: Include codeset.m4.  Subst LIBICONV_INCLUDE and
	LIBICONV_LIBDIR.  Check for libiconv in build tree.
	* Makefile.in (LIBICONV_LIBDIR, LIBICONV_INCLUDE): New macros.
	(INTERNAL_CFLAGS_BASE): Add LIBICONV_INCLUDE.
	(INTERNAL_LDFLAGS): Add LIBICONV_LIBDIR.
	* gdb_obstack.h (obstack_grow_wstr): New define.
	* gdb_wchar.h: New file.
	* defs.h: Include it.

	* gdb.texinfo (Character Sets): Remove obsolete text.  Document
	set target-wide-charset.
	(Requirements): Mention iconv.

	* gdb.base/store.exp: Update for change to escape output.
	* gdb.base/callfuncs.exp (fetch_all_registers): Update for change
	to escape output.
	* gdb.base/pointers.exp: Update for change to escape output.
	* gdb.base/long_long.exp (gdb_test_long_long): Update for change
	to escape output.
	* gdb.base/constvars.exp (do_constvar_tests): Update for change to
	escape output.
	* gdb.base/call-rt-st.exp (print_struct_call): Update for change
	to escape output.
	* gdb.cp/ref-types.exp (gdb_start_again): Update for change to
	escape output.
	* gdb.base/setvar.exp: Update for change to escape output.
	* lib/gdb.exp (default_gdb_start): Set LC_CTYPE to C.
	* gdb.base/printcmds.exp (test_print_all_chars): Update for change
	to escape output.
	(test_print_string_constants): Likewise.
	* gdb.base/charset.exp (valid_host_charset): Check size of
	wchar_t.  Handle UCS-2 and UCS-4.  Add tests for wide and unicode
	cases.  Handle "auto"-related output.
	* gdb.base/charset.c (char16_t, char32_t): New typedefs.
	(uvar, Uvar): New globals.

2014-05-19  Dawn Perchik  <dperchik@embarcadero.com>

	Merge git commit f92c9c9391620f1779d27589b95fb759247d958a
	from gdb trunk for wide char support:
	2008-10-22  Tom Tromey  <tromey@redhat.com>
	PR gdb/2506:
	* c-exp.y (string_exp): New production.
	(exp): Use it.

2014-05-14  Dawn Perchik  <dperchik@embarcadero.com>

	* p-valprint.c (pascal_object_print_value_fields): Don't print the
	name of the field unless options->field_name_print is set.
	* ada-valprint.c (print_field_values): Don't print the name of the
	field unless options->field_name_print is set.
	* jv-valprint.c (java_print_value_fields): Don't print the name of the
	field unless options->field_name_print is set.

2014-05-13  Dawn Perchik  <dperchik@embarcadero.com>

	* valprint.h (struct value_print_options): Add print options
	field_name_print and expand_aggregates.
	* valprint.c (user_print_options): Initialize options field_name_print
	to 1 and expand_aggregates to 0.
	(_initialize_valprint): Add support for setting/showing options
	field_name_print and expand_aggregates.
	(show_field_name_print): New function: Show value of option
	field_name_print.
	(show_expand_aggregates): New function: Show value of option 
	expand_aggregates.
	* varobj.c (should_display_contents): Return 1 if it's an aggregate
	and print option expand_aggregates is set.
	Remove obsolete check for env var "DISPLAY_STRUCT_CONTENTS".
	(c_value_of_variable): If we're expanding aggregates, then look
	inside references by setting opts.deref_ref = 1;
	* cp-valprint.c (cp_print_value_fields): Don't print the name of the
	field unless options->field_name_print is set.

2014-05-13  Dawn Perchik  <dperchik@embarcadero.com>

	* varobj.c (should_display_contents): Change param to take the var type
	to avoid extra overhead.
	(c_value_of_variable): Pass vartype to should_display_contents().

2014-05-08  Dawn Perchik  <dperchik@embarcadero.com>

	* dwarf2read.c (var_decode_location): Remove workaround for
	issue with GDB crash on evaluation variables resolved via location
	lists, allowing variables to be LOC_COMPUTED.
	* dwarf2loc.c (find_location_expression): Don't adjust addresses
	in .debug_loc section by the object's base address to workaround
	issue with already adjusted addresses in .debug_loc by dsymlink. 

2014-05-07  Dawn Perchik  <dperchik@embarcadero.com>

	* p-exp.y (ident:): Allow BLOCKNAME to be considered an ident in
	case we have a method with the same name as a global function.

2014-05-05  Kirill Lapshin  <Kirill.Lapshin@embarcadero.com>

	Checks against possible NULL file entry (buggy line table) 
	line table ops.
	* dwarf2read.c (dwarf_decode_lines): Checks against NULL fe.
	* dwarf2read.c (dwarf2_start_subfile): Checks against NULL fe.

2014-05-01  Dawn Perchik  <dperchik@embarcadero.com>

	Support for evaluating locals when Delphi nested functions are used.
	* ../include/elf/dwarf2.h (DW_AT_BORLAND_Delphi_frameptr): New DWARF
	attribute.
	* dwarf2read.c (dwarf2_add_member_fn): Set is_frameptr flag if
	param is TYPE_FIELD_FRAMEPTR or if DW_AT_BORLAND_Delphi_frameptr
	attribute is present.
	(read_subroutine_type): Set TYPE_FIELD_FRAMEPTR if
	DW_AT_BORLAND_Delphi_frameptr attribute is present.
	(dwarf_attr_name): Return string for DW_AT_BORLAND_Delphi_frameptr.
	* eval.c (evaluate_subexp_standard): Add comment about calling Delphi
	nested functions.
	* gdbtypes.h (struct main_type): Add new flag frameptr. 
	(struct type): Add new flag is_frameptr. 
	(TYPE_FIELD_FRAMEPTR, FIELD_FRAMEPTR): New macros for flag frameptr.
	* p-exp.y (variable: name_not_typename): Handle fields which are
	implicit members of __FRAME__ and __FRAMEPTR__.
	* symtab.c (lookup_symbol_aux): Check to see if the variable is a
	member of an implicit Delphi frameptr or frame structure and set
	is_a_field_of_this accordingly.
	* symtab.h (implicit_field_kinds): Add enums for the different kinds
	of implicit variables a field can be, as represented in
	is_a_field_of_this.
	* valops.c (value_of_implicit_frameptr_param,
	value_of_implicit_frame_struct): New functions for looking up the
	implicit frame variable when nested functions are present.
	* value.h (value_of_implicit_frameptr_param,
	value_of_implicit_frame_struct): Add prototypes.

2014-04-29  Dawn Perchik  <dperchik@embarcadero.com>

	* gdbtypes.c (rank_one_type): If both TYPE_NAMEs are NULL but we have
	both TYPE_TAG_NAMEs, check them for equality.  This mimics what
	newer gdb versions do, since the newer gdbs have the name to the
	tag_name in the case of struct types.
	(lookup_struct_elt_fn_field): Fix typo in error string.

2014-04-21  Kirill Lapshin  <Kirill.Lapshin@embarcadero.com>

	Fix rest of Delphi and C++ cases related to struct_return in fCall
	- by reference and by value in case result type is struct.
	* arm-tdep.c (arm_return_value): Fix struct_return pattern failure
	in Delphi case when result has struct type and result returned by 
	value. Pattern used if type is struct and Delphi struct type flag set.
	* gnu-v3-abi.c (gnuv3_pass_by_reference): Fix struct_return pattern 
	failure in C++ case when result has struct type and result returned 
	as reference. Pattern improved with type length compare with
	maximum type may be returned in general purpose register.

2014-04-10  Kirill Lapshin  <Kirill.Lapshin@embarcadero.com>

	Embarcadero specific RTL fCall Wrapper - case with Delphi embedded
	String type returned by C++ function.
	* infcall.c (find_function_addr): Resolve TYPE_CODE_TYPEDEF to
	target type.
	* arm-tdep.c (arm_return_value): Add case if type has code STRUCT
	and name "System::UnicodeString" for struct result return.

2014-04-02  Kirill Lapshin  <Kirill.Lapshin@embarcadero.com>

	Embarcadero specific RTL exception debug hooks.
	Changes in hooks breakpoint set logic - raw minsyms addresses used
	instead of full sal info for setting breakpoint - in some cases sal 
	symtab and source line cannot be resolved correctly - i.e. now hook
	breakpoint set by absolute address set for minsym by linker.
	* breakpoint.c (set_dbgexcnotify): Hooks minsym raw addresses used
	for setting breakpoints.

2014-03-27  Kirill Lapshin  <Kirill.Lapshin@embarcadero.com>

	Changes in StopSocket service thread start logic - thread started 
	before waiting next packet from target only in case target running - 
	now controlled by remote_resume (ON) and by receiving T-packet reply 
	(OFF).
	* remote.c (remote_wait): Reset StopSocket thread enabled switch on 
	T-packet reply received. 
	(remote_vcont_resume, remote_resume): Set StopSocket thread enabled 
	switch on T-packet reply received.

2014-03-14  Dawn Perchik  <dperchik@embarcadero.com>

	* varobj.c (c_value_of_variable): Strip off top-level references
	when displaying varobjs.

2014-03-14  Dawn Perchik  <dperchik@embarcadero.com>

	* c-valprint.c (c_val_print): Strip off the empty struct wrapper (if
	any) when displaying delphireturn types.
	* varobj.c (c_value_of_variable): Ditto.
	Move tests for whether varobj contents should be evaluated into 
	should_display_contents() and call.
	(should_display_contents): New function.  Return 1 if we should
	display the contents of the varobj.

2014-03-14  Dawn Perchik  <dperchik@embarcadero.com>

	* varobj.c (varobj_get_type_index_from_fake_child): Fix botched test
	for unions.

2014-03-14  Dawn Perchik  <dperchik@embarcadero.com>

	* arm-tdep.c (arm_calling_convention_supported,
	arm_calling_convention_string): If the calling convention wasn't
	specified, assme it's DW_CC_normal.

2014-03-10  Dawn Perchik  <dperchik@embarcadero.com>

	* arm-tdep.c (arm_calling_convention_supported): Replace 
	DW_CC_GNU_borland_fastcall_i386 with
	C_BORLAND_fastcall, which is what Dcc is now emitting.

2014-03-10  Dawn Perchik  <dperchik@embarcadero.com>

	Embarcadero support for handling of unsupported calling conventions.
	* arch-utils.c (default_calling_convention_supported,
	default_calling_convention_string): New funcs.
	* arch-utils.h: Add prototypes.    
	* gdbarch.c (gdbarch_calling_convention_supported, 
	set_gdbarch_calling_convention_string,
	gdbarch_calling_convention_supported, 
	set_gdbarch_calling_convention_string): New gdbarch interfaces.
	* gdbarch.h: Add prototypes.
	* dwarf2read.c (dwarf2_add_member_fn): Preserve the calling
	convention in the method.
	* arm-tdep.c (arm_calling_convention_supported,
	arm_calling_convention_string): New functions for gdbarch interface.
	(arm_calling_convention_supported): Treat
	DW_CC_GNU_borland_fastcall_i386 as DW_CC_normal as a workaround for
	Dcc emitting DW_CC_GNU_borland_fastcall_i386 for all functions.
	* infcall.c (hand_function_call): If the calling convention is not
	supported on the architecture according to
	gdbarch_calling_convention_supported(), report an error.

2014-03-06  Dawn Perchik  <dperchik@embarcadero.com>

	Alternate workaround for lack of CFI instructions in debug_frame
	by disallowing stepping through prolog code.  This supercedes
	Apple's fix for the same issue by not recognising the function
	declaration as a viable statement for setting BP.  Apple's fix
	had the problem that the user would think they were at the start
	of the function, but they were actually stopped at the first
	line, because the BP id identified the wrong line.
	* linespec.c (decode_all_digits_exhaustive): Report an error if
	the user tries to set a BP in or before the function prolog.
	(decode_all_digits): Don't advance the line's address to beyond
	the prolog, report the real address instead (used in commands like
	"info line").

2014-03-05  Dawn Perchik  <dperchik@embarcadero.com>

	* ../include/elf/dwarf2.h (DW_AT_BORLAND_Delphi_return): New DWARF
	attribute.
	(DW_CC_BORLAND_fastcall): New DWARF calling convention.
	(DW_CC_GNU_borland_fastcall_i386): New DWARF calling convention,
	merged from GDB 7.3.
	* gdbtypes.h (TYPE_FLAG_DELPHI_RETURN): New flag.
	* dwarf2read.c (read_structure_type): If struct has
	attr DW_AT_BORLAND_Delphi_return, set TYPE_FLAG_DELPHI_RETURN.
	* c-typeprint.c (c_type_print_base): If TYPE_FLAG_DELPHI_RETURN
	flag is set, print "__declspec(delphireturn)".

2014-03-05  Kirill Lapshin  <Kirill.Lapshin@embarcadero.com>

	Struct return for Delphi String type in fCall enabled.
	* infcall.c (hand_function_call): Check against if type may be returned
	with struct_return now is on gdbarch and language only.
	* p-lang.c (pascal_pass_by_reference): TYPE_CODE_STRING type now valid
	type for struct_return result.
	* arm-tdep.c (arm_fcw_argument_push): Fix function crash in fCall
	problem due to arm_push_actual_fw_args() not called in case function
	does not have explicit arguments on formal arguments list but using
	struct_return.

2014-02-25  Dawn Perchik  <dperchik@embarcadero.com>

	* top.c: Update copyright date to 2014.

2014-02-20  Kirill Lapshin  <Kirill.Lapshin@embarcadero.com>

	Fix passing constants in fCall when function expect references in C++.
	* infcall.c (hand_function_call): Allocate constant arguments on
	debuggee stack and pass pointers instead of values in case reference
	expected by function.

2014-02-17  Kirill Lapshin  <Kirill.Lapshin@embarcadero.com>

	* infrun.c (resume): Run all target threads always, otherwise 
	GDB will not able to detect cases if stepped instruction 
	caused exception. No side effects noticed yet.
	TODO: Probably Embarcadero RTL signal/exception processing specific ?

2014-02-13  Kirill Lapshin  <Kirill.Lapshin@embarcadero.com>

	* varobj.c (c_make_name_of_child): Create child name with adjusted
	index in case if parent is ARRAY and low bound is non-zero.
	(c_value_of_child): Do child index adjusment to array low bound set
	by compiler in case if child parent is ARRAY with non-zero low bound.

2014-02-07  Kirill Lapshin  <Kirill.Lapshin@embarcadero.com>

	* p-lang.c (pascal_pass_by_reference): New function for
	default_pass_by_reference replacement for Delphi.
	* infcall.c (hand_function_call): Unconditional error
	reporting in case of function argument should passed by
	reference changed to asking language_pass_by_reference() in first. 
	* arm-tdep.c (arm_push_actual_fw_args): Check against if argument
	must be passed as reference removed - all arguments types already
	checked at moment of arm_push_actual_fw_args called.

2014-02-06  Dawn Perchik  <dperchik@embarcadero.com>

	Merge git commit 0649f2e89727e3c9ed0f071b78208a8c1f626b50
	from gdb trunk for function call claeanup:
	2005-09-02  Mark Kettenis  <kettenis@gnu.org>
	* infcall.c (call_function_by_hand): Remove code handling
	deprecated_push_arguments.  Bail out early if push_dummy_call
	isn't available.
	* gdbarch.sh (deprecated_push_arguments): Delete.  Adjust a few
	comments accordingly.
	* gdbarch.h, gdbarch.c: Regenerate.

2014-02-06  Dawn Perchik  <dperchik@embarcadero.com>

	Merge git commit 046ee45b04e579e9ade67f369d32d3a19eaf9168
	from gdb trunk for struct return fixes:
	2006-08-01  Mark Kettenis  <kettenis@gnu.org>
	* arm-tdep.h (enum struct_return): New.
	(struct gdbarch_tdep): Add struct_return member.
	* arm-tdep.c (arm_return_value): Return
	RETURN_VALUE_STRUCT_CONVENTION for aggregates when the ABI uses
	pcc_struct_return.
	(arm_gdbarch_init): Default to reg_struct_return.
	* armobsd-tdep.c (armobsd_init_abi): Set pcc_struct_return.

2014-02-06  Dawn Perchik  <dperchik@embarcadero.com>

	* infcall.c (hand_function_call): Remove workaround for bad struct
	return convention on ARM.
	* infcmd.c (print_return_value): Likewize.
	* arm-tdep.c (arm_return_value): Remove FIXME.

2014-02-06  Dawn Perchik  <dperchik@embarcadero.com>

	Merge git commit 046ee45b04e579e9ade67f369d32d3a19eaf9168
	from gdb trunk for struct return fixes:
	2005-09-26  Paul Brook  <paul@codesourcery.com>
	* arm-tdep.c (arm_type_align): New function.
	(arm_push_dummy_call): Use it.  Ensure proper argument alignment.
	(arm_extract_struct_value_address): Remove.
	(arm_use_struct_convention): Rename...
	(arm_return_in_memory): ... To this.  Return nonzero for all small
	aggregates under the EABI.
	(arm_return_value): New function.
	(arm_gdbarch_init): Default for VFP float model for EABI binaries.
	Use set_gdbarch_return_value instead of obsolete functions.
	* testsuite/long_long.exp: Exclude eabi targets from arm FPA float
	format test.

2014-02-06  Dawn Perchik  <dperchik@embarcadero.com>

	Merge git commit 046ee45b04e579e9ade67f369d32d3a19eaf9168
	from gdb trunk for calling convention support:
	2008-04-22  Corinna Vinschen  <vinschen@redhat.com>
	* NEWS: Add information on calling convention and new SH CLI options.
	* sh-tdep.c (sh_cc_gcc): New static string.
	(sh_cc_renesas): Ditto.
	(sh_cc_enum): New static string array.
	(sh_active_calling_convention): New static string pointer denoting
	active user chosen ABI.
	(sh_is_renesas_calling_convention): New function to return function
	specific ABI, or user choice if necessary.
	(sh_use_struct_convention): Rename first argument and turn around its
	meaning.  Check for renesas ABI and return accordingly.
	(sh_use_struct_convention_nofpu): New function.
	(sh_next_flt_argreg): Get function type as third parameter.  Check
	for renesas ABI and choose floating registers accordingly.
	(sh_push_dummy_call_fpu): Check for ABI and choose argument slot and
	struct return slot accordingly.
	(sh_push_dummy_call_nofpu): Ditto.
	(sh_return_value_nofpu): Call sh_use_struct_convention_nofpu from here.
	Evaluate ABI and give to sh_use_struct_convention_nofpu.
	(sh_return_value_fpu):  Evaluate ABI and give to
	sh_use_struct_convention.
	(show_sh_command): New function.
	(set_sh_command): Ditto.
	(_initialize_sh_tdep): Initialize `set/show sh calling-convention
	CLI command.
	* gdbarch.sh (return_value): Add func_type argument.
	* gdbarch.c: Regenerate.
	* gdbarch.h: Ditto.
	* eval.c (evaluate_subexp_standard): Rename local variable value_type to
	val_type so as not to collide with value_type function.  Call
	using_struct_return with additional function type argument.
	* infcall.c (call_function_by_hand): Call using_struct_return and
	gdbarch_return_value with additional function type argument.
	* infcmd.c (print_return_value): Take addition func_type argument.
	Call gdbarch_return_value with additional function type argument.
	(finish_command_continuation): Call print_return_value with additional
	function type argument.
	(finish_command): Ditto.
	* sparc-tdep.c (sparc32_push_dummy_code): Call using_struct_return with
	additional function type argument.
	* stack.c (return_command): Call using_struct_return and
	gdbarch_return_value with additional function type argument.
	* value.c (using_struct_return): Take additional function type argument.
	* value.h (using_struct_return): Accommodate declaration.
	* alpha-tdep.c (alpha_return_value): Add func_type argument.
	* amd64-tdep.c (amd64_return_value): Ditto.
	* arm-tdep.c (arm_return_value): Ditto.
	* avr-tdep.c (avr_return_value): Ditto.
	* cris-tdep.c (cris_return_value): Ditto.
	* frv-tdep.c (frv_return_value): Ditto.
	* h8300-tdep.c (h8300_return_value): Ditto.
	(h8300h_return_value): Ditto.
	* hppa-tdep.c (hppa32_return_value): Ditto.
	(hppa64_return_value): Ditto.
	* i386-tdep.c (i386_return_value): Ditto.
	* ia64-tdep.c (ia64_return_value): Ditto.
	* iq2000-tdep.c (iq2000_return_value): Ditto.
	* m32c-tdep.c (m32c_return_value): Ditto.
	* m32r-tdep.c (m32r_return_value): Ditto.
	* m68hc11-tdep.c (m68hc11_return_value): Ditto.
	* m68k-tdep.c (m68k_return_value): Ditto.
	(m68k_svr4_return_value): Ditto.
	* m88k-tdep.c  (m88k_return_value): Ditto.
	* mep-tdep.c (mep_return_value): Ditto.
	* mips-tdep.c (mips_eabi_return_value): Ditto.
	(mips_n32n64_return_value): Ditto.
	(mips_o32_return_value): Ditto.
	(mips_o64_return_value): Ditto.
	* mn10300-tdep.c (mn10300_return_value): Ditto.
	* mt-tdep.c (mt_return_value): Ditto.
	* ppc-linux-tdep.c (ppc_linux_return_value): Ditto.
	* ppc-sysv-tdep.c (ppc_sysv_abi_return_value): Ditto.
	(ppc_sysv_abi_broken_return_value): Ditto.
	(ppc64_sysv_abi_return_value): Ditto.
	* ppc-tdep.h (ppc_sysv_abi_return_value): Ditto.
	(ppc_sysv_abi_broken_return_value): Ditto.
	(ppc64_sysv_abi_return_value): Ditto.
	* ppcnbsd-tdep.c (ppcnbsd_return_value): Ditto.
	* rs6000-tdep.c (rs6000_return_value): Ditto.
	* s390-tdep.c (s390_return_value): Ditto.
	* score-tdep.c (score_return_value): Ditto.
	* sh-tdep.c (sh_return_value_nofpu): Ditto.
	(sh_return_value_fpu): Ditto.
	* sh64-tdep.c (sh64_return_value): Ditto.
	* sparc-tdep.c (sparc32_return_value): Ditto.
	* sparc64-tdep.c (sparc64_return_value): Ditto.
	* spu-tdep.c (spu_return_value): Ditto.
	* v850-tdep.c (v850_return_value): Ditto.
	* vax-tdep.c (vax_return_value): Ditto.
	* xstormy16-tdep.c (xstormy16_return_value): Ditto.
	* xtensa-tdep.c (xtensa_return_value): Ditto.
	* gdbtypes.h (struct type): Add calling_convention member.
	* dwarf2read.c (read_subroutine_type): Add calling convention read
	from DW_AT_calling_convention attribute to function type.

2014-02-06  Kirill Lapshin  <Kirill.Lapshin@embarcadero.com>

	* varobj.c (varobj_update): Always re-evaluate array value on 
	update like new for current scope. No method for members values 
	changed detection if array ptr or/and its type was not changed.
	Case may happen if scope (frame) not changed during stepping.

2014-02-05  Dawn Perchik  <dperchik@embarcadero.com>

	Merge git commit c60deb0fb4d5992f92731ba1c1f6ce276357d1af
	from gdb trunk for calling convention support:
	2007-10-12  Ulrich Weigand  <uweigand@de.ibm.com>
	* gdbarch.sh (deprecated_use_struct_convention): Remove.
	(extract_return_value, store_return_value): Remove.
	(return_value): Remove default implementation.
	* gdbarch.c, gdbarch.h: Regenerate.
	* stack.c (return_command): Remove compatibility hack.
	* arch-utils.c (legacy_return_value): Remove.
	* arch-utils.h (legacy_return_value): Likewise.
	* arch-utils.c (always_use_struct_convention): Remove.
	* arch-utils.h (always_use_struct_convention): Likewise.
	* value.c (generic_use_struct_convention): Remove.
	* defs.h (generic_use_struct_convention): Likewise.

2014-02-05  Dawn Perchik  <dperchik@embarcadero.com>

	Merge git commit f72223f07a0483c01f202421f43b243e16c8b583
	from gdb trunk for calling convention support:
	2007-10-12  Ulrich Weigand  <uweigand@de.ibm.com>
	* avr-tdep.c (avr_return_value): New function.
	(avr_gdbarch_init): Call set_gdbarch_return_value instead of
	set_gdbarch_extract_return_value.
	* fvr-tdep.c (frv_return_value): New function.
	(frv_gdbarch_init): Call set_gdbarch_return_value instead of
	set_gdbarch_extract_return_value, set_gdbarch_store_return_value,
	and set_gdbarch_deprecated_use_struct_convention.
	* ia64-tdep.c (ia64_use_struct_convention): Make static.
	Add check for structure, union, or array types.
	(ia64_extract_return_value): Make static.
	(ia64_store_return_value): Make static.  Support multi-word values.
	(ia64_return_value): New function.
	(ia64_gdbarch_init): Call set_gdbarch_return_value instead of
	set_gdbarch_extract_return_value, set_gdbarch_store_return_value,
	and set_gdbarch_deprecated_use_struct_convention.

2014-02-05  Dawn Perchik  <dperchik@embarcadero.com>

	Fix regression on ARM for C++ struct returns
	caused by merge of git commit
	358fd4bb6070d61731effff913177fb7d5be1801:
	* infcall.c (call_function_by_hand): If ARM target, struct_return is
	true and gdbarch_return_value() returns
	RETURN_VALUE_ABI_RETURNS_ADDRESS, ignore the returned convention and
	read the struct value from struct_addr.

2014-02-05  Dawn Perchik  <dperchik@embarcadero.com>

	Fix missing and misplaced initializations of la_pass_by_reference
	field caused by merge of git commit
	358fd4bb6070d61731effff913177fb7d5be1801:
	* c-lang.c (asm_language_defn): Remove cp_pass_by_reference.
	(cplus_language_defn): Add cp_pass_by_reference.
	* objc-lang.c (objcplus_language_defn): Add cp_pass_by_reference.

2014-02-05  Dawn Perchik  <dperchik@embarcadero.com>

	Merge git commit 358fd4bb6070d61731effff913177fb7d5be1801
	from gdb trunk for calling convention support:
	2007-09-23  Daniel Jacobowitz  <dan@codesourcery.com>
	* infcall.c (call_function_by_hand): Handle language-specific
	pass and return by reference.
	* cp-abi.c (cp_pass_by_reference): New.
	* cp-abi.h (cp_pass_by_reference): Declare.
	(struct cp_abi_ops): Add pass_by_reference.
	* gnu-v3-abi.c (gnuv3_pass_by_reference): New.
	(init_gnuv3_ops): Set pass_by_reference.
	* language.c (language_pass_by_reference): New.
	(default_pass_by_reference): New.
	(unknown_language_defn, auto_language_defn, local_language_defn): Add
	default_pass_by_reference.
	* langauge.h (struct language_defn): Add la_pass_by_reference.
	(language_pass_by_reference, default_pass_by_reference): Declare.
	* ada-lang.c (ada_language_defn): Add default_pass_by_reference.
	* c-lang.c (c_language_defn, asm_language_defn)
	(minimal_language_defn): Likewise.
	(cplus_language_defn): Add cp_pass_by_reference.
	* f-lang.c (f_language_defn): Add default_pass_by_reference.
	* jv-lang.c (java_language_defn): Likewise.
	* m2-lang.c (m2_language_defn): Likewise.
	* objc-lang.c (objc_language_defn): Likewise.
	* p-lang.c (pascal_language_defn): Likewise.
	* scm-lang.c (scm_language_defn): Likewise

2014-02-04  Dawn Perchik  <dperchik@embarcadero.com>

	Merge git commit 7edaa0ad61b29f7db115e64229bc00588595d419
	from gdb trunk for calling convention support:
	2007-06-18  Markus Deuling  <deuling@de.ibm.com>
	* gdbarch.sh (EXTRACT_RETURN_VALUE): Replace with
	gdbarch_extract_return_value.
	* value.c (generic_use_struct_convention): Likewise (comment).
	* ia64-tdep.c (ia64_use_struct_convention): Likewise (comment).
	* arch-utils.c (legacy_return_value): Likewise.
	* arch-utils.h (legacy_return_value): Likewise (comment).
	* gdbarch.sh (STORE_RETURN_VALUE): Replace by
	gdbarch_store_return_value.
	* stack.c (return_command): Likewise (comment).
	* arch-utils.h (legacy_return_value): Likewise (comment).
	* arch-utils.c (legacy_return_value): Likewise.
	* gdbarch.c, gdbarch.h: Regenerate.

2014-02-04  Dawn Perchik  <dperchik@embarcadero.com>

	Merge git commit 8d6b82f7daabd6f17fb6176c5fce0900b81d2a9f
	from gdb trunk for calling convention support:
	2007-01-13  Mark Kettenis  <kettenis@gnu.org>
	* gdbarch.sh (deprecated_extract_return_value)
	(deprecated_store_return_value): Remove.
	(extract_return_value, store_return_value): Remove default values.
	* gdbarch.c, gdbarch.h: Regenerate.
	* arch-utils.c, arch-utils.h (legacy_extract_return_value)
	(legacy_store_return_value): Remove.
	* regcache.c, regcache.h (deprecated_grub_regcache_for_registers):
	Remove.

2014-02-04  Dawn Perchik  <dperchik@embarcadero.com>

	Merge git commit 5b1bbb345d7473a3e0d63db69e27860575f676d2
	from gdb trunk for calling convention support:
	2007-06-18  Markus Deuling  <deuling@de.ibm.com>
	* gdbarch.sh (DEPRECATED_USE_STRUCT_CONVENTION): Replace by
	gdbarch_deprecated_use_struct_convention.
	* arch-utils.c (legacy_return_value): Likewise.
	* gdbarch.c, gdbarch.h: Regenerate.

2014-02-04  Dawn Perchik  <dperchik@embarcadero.com>

	Merge git commit 001f8ec5e0fcc2b107cc299aedd9412ffbf4fdc5
	from gdb trunk for calling convention support:
	2007-06-18  Markus Deuling  <deuling@de.ibm.com>
	* gdbarch.sh (DEPRECATED_REG_STRUCT_HAS_ADDR): Replace by
	gdbarch_deprecated_reg_struct_has_addr.
	* infcall.c (call_function_by_hand): Likewise.
	(DEPRECATED_REG_STRUCT_HAS_ADDR_P): Replace by
	* gdbarch_deprecated_reg_struct_has_addr_p.
	* infcall.c (call_function_by_hand): Likewise.
	* gdbarch.c, gdbarch.h: Regenerate.

2014-02-04  Dawn Perchik  <dperchik@embarcadero.com>

	Merge git commit c59cf4f734fc589cb83a57442bf3ca4ed832f0b8
	from gdb trunk for calling convention support:
	2007-06-18  Markus Deuling  <deuling@de.ibm.com>
	* gdbarch.sh (DEPRECATED_EXTRACT_STRUCT_VALUE_ADDRESS): Remove.
	* sh-tdep.c (sh_extract_struct_value_address): Remove.
	(sh_gdbarch_init): Remove
	set_gdbarch_deprecated_extract_struct_value_address.
	* sh64-tdep.c (sh64_extract_struct_value_address): Remove.
	(sh64_gdbarch_init): Remove
	set_gdbarch_deprecated_extract_struct_value_address.
	* ia64-tdep.c (ia64_extract_struct_value_address): Remove.
	(ia64_gdbarch_init): Remove
	set_gdbarch_deprecated_extract_struct_value_address.
	* frv-tdep.c (frv_extract_struct_value_address): Remove.
	(frv_gdbarch_init): Remove
	set_gdbarch_deprecated_extract_struct_value_address.
	* gdbarch.c, gdbarch.h: Regenerate.

2014-02-04  Dawn Perchik  <dperchik@embarcadero.com>

	Merge git commit a9c04b571d237514dba18cb9dbaabd07aad5e2db
	from gdb trunk for calling convention support:
	2007-05-08  Ulrich Weigand  <uweigand@de.ibm.com>
	* gdbarch.sh (deprecated_store_struct_return): Remove.
	* gdbarch.c, gdbarch.h: Regenerate.
	* frv-tdep.c (frv_store_struct_return): Remove.
	(frv_gdbarch_init): Do not install it.

2014-02-04  Dawn Perchik  <dperchik@embarcadero.com>

	Merge git commit 561cbeb5268bcdb5c0551039fd8ff9ed38167df0
	from gdb trunk for calling convention support:
	2007-10-12  Ulrich Weigand  <uweigand@de.ibm.com>
	* block.h (struct block): Remove "gcc_compile_flag" member.
	(BLOCK_GCC_COMPILED): Remove.
	* block.c (allocate_block): Do not clear BLOCK_GCC_COMPILED.
	* buildsym.c (finish_block): Do not set it.
	* symmisc.c (dump_symtab_1): Do not dump it.
	* value.h (using_struct_return): Remove "gcc_p" argument.
	* value.c (using_struct_return): Likewise.
	* eval.c (evaluate_subexp_standard): Adapt callers.
	* infcall.c (call_function_by_hand): Likewise.
	* stack.c (return_command): Likewise.
	* sparc-tdep.c (sparc32_push_dummy_code): Likewise.
	* gdbarch.sh (push_dummy_code): Remove "using_gcc" parameter.
	* gdbarch.c, gdbarch.h: Regenerate.
	* cris-tdep.c (cris_push_dummy_code): Adapt prototype.
	* hppa-hpux-tdep.c (hppa_hpux_push_dummy_code): Likewise.
	* sparc-tdep.c (sparc32_push_dummy_code): Likewise.
	* infcall.c (generic_push_dummy_code, push_dummy_code): Likewise.
	(push_dummy_code, call_function_by_hand): Adapt callers.

2014-02-04  Dawn Perchik  <dperchik@embarcadero.com>

	Merge git commit 077f32792e2645e2a0321645cbc6c0dbddb35f69
	from gdb trunk for calling convention support:
	2007-10-25  Wu Zhou  <woodzltc@cn.ibm.com>
	    Carlos Eduardo Seo  <cseo@linux.vnet.ibm.com>
	    Jim Blandy  <jimb@codesourcery.com>
	* dwarf2read.c (read_partial_die): check the value
	of DW_AT_calling_convention in Fortran programs.

2014-02-03  Dawn Perchik  <dperchik@embarcadero.com>

	* main.c (captured_main): If the maximum length of the
	OPT_STOPSOCKET option was exceeded, include that maximum in
	the error meesage.

2014-02-03  Dawn Perchik  <dperchik@embarcadero.com>

	* defs.h: Cleanup - remove obsolete preprocessor defines for
	FIX_FOR_RS36093 and FIX_FOR_RS36677 (code is always enabled).
	* linespec.h: Ditto.
	* linespec.c: Ditto.
	* breakpoint.c: Ditto.
	* p-lang.c: Ditto.
	* symtab.c: Ditto.
	* utils.c: Ditto.

2014-01-31  Dawn Perchik  <dperchik@embarcadero.com>

	* p-valprint.c (pascal_value_print): Set deref_ref option to 1
	locally so references will dereferenced, as in C++.  Check for
	typedefs.

2014-01-31  Dawn Perchik  <dperchik@embarcadero.com>

	* infcall.c (hand_function_call): Error if called function returns
	struct by value to workaround lack of support in function call
	wrapper.  Cleanup error message for caught exception.  Add FIXMEs.
	* arm-tdep.c: Fix compiler warnings.
	(arm_pass_value_as_reference): Use DEPRECATED_REGISTER_SIZE for
	register size.
	(arm_return_value): Return RETURN_VALUE_ABI_RETURNS_ADDRESS for
	return type of string type.  Add FIXMEs.

2014-01-27  Kirill Lapshin  <Kirill.Lapshin@embarcadero.com>

	* dwarf2read.c: Cleanup, comments.

2014-01-24  Dawn Perchik  <dperchik@embarcadero.com>

	Cleanup: fix indentation and coding style. 

2014-01-23  Dawn Perchik  <dperchik@embarcadero.com>

	Add cleanup code for FCW state.  Handle possible nested function call
	by using a stack for the current FCW context.
	* infcall.h (struct fcallwrapper_info): Add next field for stack
	push/pop.  Add FCW BPs ReadyToPushPoint_bpt, CatchPoint_bpt,
	ResultFetchPoint_bpt.
	(using_current_fcw, push_current_fcw, pop_current_fcw,
	fcw_breakpoint_hit): Add prototypes.
	* infcall.c (init_fcallwrapper_info): Change to take fcallwrapper_info
	struct pointer.  Use memset to init.
	(using_current_fcw): New function.  Return 1 if the current function
	call wrapper is being used.
	(push_current_fcw): New function.  Push the current fCall wrapper info.
	(pop_current_fcw): New function.  Pop the current fCall wrapper info
	and reset any changed state.
	(pop_current_fcw_cleanup): New function.  Version of pop_current_fcw
	that can be called by cleanup code.
	(find_fcw_breakpoint):  New function.  Find which FCW is responsible
	for setting this FCW BP and clear the BP.  Return 1 on success.
	(fcw_breakpoint_hit): New function.  Test if the BP is one of our FCW
	control BPs with BP_NAME.
	If so, delete the BP and return 1, else return 0.
	(fcw_scan_fcallwrapper): Change params to localize setting of FCW
	fields.  Return modified real_pc.  Add code to set FCW control BPs and
	FCW fields fcallwrapper_addr and user_real_pc.
	(hand_function_call): Move code into fcw_scan_fcallwrapper() which
	handles FCW setup.  Call push_current_fcw to start a new FCW context.  
	Register cleanup code for FCW to call pop_current_fcw and restore the
	state.  Remove old cleanup code for FCW state.
	* breakpoint.c (bpstat_what): Replace tests for FCW control BPs with
	calls to fcw_breakpoint_hit(), and don't delete.

2014-01-23  Dawn Perchik  <dperchik@embarcadero.com>

	* arm-tdep.c (arm_pass_value_as_reference): Fix condition for testing
	if param should be passed as a reference.

2014-01-23  Dawn Perchik  <dperchik@embarcadero.com>

	Make cpsr_reg TARGET_ARM specific and add initialization.
	* remote.c (remote_wait): Wrap set_register_CPSR_HACK() call
	with ifdef TARGET_ARM. 
	* regcache.c (init_register_CPSR_HACK): New function.  Initialize
	cpsr_reg global to -1.
	(_initialize_regcache): Call init_register_CPSR_HACK().

2014-01-23  Kirill Lapshin  <Kirill.Lapshin@embarcadero.com>

	Fix problems with stepping over atomic instructions sequences.
	* arm-tdep.c (thumb_deal_with_atomic_sequence_raw): 
	Atomic sequences can have more than one branch instructions.
	(arm_software_single_step): Remove both inserted brekpoints
	if insert_bpt parameter flag was passed.

2014-01-22  Dawn Perchik  <dperchik@embarcadero.com>

	* regcache.c (make_cleanup_set_restore_register_CPSR_HACK):
	New function.  Save cpsr_reg global and restore on cleanup.
	(set_register_CPSR_HACK_cleanup): Reset cpsr_ref on cleanup.
	* regcache.h (make_cleanup_set_restore_register_CPSR_HACK,
	set_register_CPSR_HACK_cleanup): Add prototypes.
	* infcall.c (hand_function_call): Replace local save/restore of
	cpsr_reg with call to make_cleanup_set_restore_register_CPSR_HACK().

2014-01-22  Dawn Perchik  <dperchik@embarcadero.com>

	* infcall.c (hand_function_call): Fix possible NULL function
	name in error.  Test using_fcw instead of fcw->fcallwrapper_addr to
	mean we're using the fCall wrapper.  Move initialization of
	fcw->fCallCatchTriggered below fcw->fcallwrapper_addr.

2014-01-22  Dawn Perchik  <dperchik@embarcadero.com>

	* infcall.c (fcw_scan_fcallwrapper): New function.  Extract code from 
	hand_function_call() which looks up and scans the fCall wrapper
	function symbol "__dbk_fcall_wrapper". 
	(set_fcw_breakpoint): New function.  Extract code from 
	hand_function_call() which sets the temporary FCW breakpoints.
	(hand_function_call): Replace code with calls to
	fcw_scan_fcallwrapper() and set_fcw_breakpoint().  Cleanup comments.

2014-01-21  Dawn Perchik  <dperchik@embarcadero.com>

	Use access functions to access FCW globals and cpsr_reg.
	* infcall.h (fcallwrapper_info): New structure for holding FCW gobals.
	Replaces FCW gobals.
	(get_current_fcw, set_fcw_exception_raised, fcw_exception_raised):
	Add prototypes.
	* infcall.c (current_fcw): Singleton copy of fcallwrapper_info
	structure for current function call wrapper.
	(init_fcallwrapper_info): Initialize current_fcw.
	(get_current_fcw): New function: Return current_fcw.
	(set_fcw_exception_raised): New function: Set
	current_fcw->fCallCatchTriggered.
	(fcw_exception_raised): New function: Return
	current_fcw->fCallCatchTriggered.
	(hand_function_call): Use get_current_fcw() to access FCW globals
	via structure.  Use get_register_CPSR_HACK()/set_register_CPSR_HACK()
	to get/set cpsr_reg.  Fix compiler warnings.
	* arm-tdep.c (arm_fcw_argument_push): Use get_current_fcw() to access
	FCW globals via structure.  Fix compiler warnings.
	* breakpoint.c (bpstat_what): Use set_fcw_exception_raised()/
	fcw_exception_raised() to access global
	current_fcw->fCallCatchTriggered. 
	* regcache.h (get_register_CPSR_HACK, set_register_CPSR_HACK):
	Add prototypes.
	* regcache.c (cpsr_reg): Make static.
	(get_register_CPSR_HACK): New function.  Return cpsr_reg.
	(set_register_CPSR_HACK): New function.  Set cpsr_reg.
	* remote.c (remote_wait): Use set_register_CPSR_HACK() to set cpsr_reg.

2014-01-21  Dawn Perchik  <dperchik@embarcadero.com>

	* arm-tdep.c (arm_pass_value_as_reference): Fix condition for testing
	if param should be passed as a reference.

2014-01-17  Dawn Perchik  <dperchik@embarcadero.com>

	* infcall.c (hand_function_call): Document how the fCall wrapper
	works.  Report error if required fCall BP points could not be found
	while scanning __dbk_fcall_wrapper.  Add FIXMEs for cleanup work
	that should be implemented.

2014-01-16  Dawn Perchik  <dperchik@embarcadero.com>

	* infcall.c (hand_function_call): If calling a function via
	the function call wrapper, abort the function call if
	it involves a struct return to avoid crashing in user code.
	Add comments about how the function call wrapper works.

2014-01-16  Dawn Perchik  <dperchik@embarcadero.com>

	Initial support for Delphi ABI and the passing of structure values
	by reference via DWARF extension DW_AT_BORLAND_Delphi_ABI.  Currently
	all such function calls are aborted.
	* ../include/elf/dwarf2.h (DW_AT_BORLAND_Delphi_ABI): New DWARF
	attribute.
	* dwarf2read.c (read_subroutine_type): Set TYPE_FLAG_DELPHI_RECORD
	flag for attribute DW_AT_BORLAND_Delphi_ABI.
	Until compiler support added, assume all functions defined in Delphi
	adhere to the Delphi ABI.
	(dwarf_attr_name): Add DW_AT_BORLAND_Delphi_ABI.
	(dwarf2_add_member_fn): Preserve TYPE_FLAG_DELPHI_RECORD flag.
	* arm-tdep.c (arm_pass_value_as_reference): New function.
	Return 1 if the function argument is passed by value but should
	instead be passed by reference (as in the case of passing a structure
	by-value to a function which follows the Delphi ABI).
	(arm_push_actual_fw_args): Abort the function call if
	arm_pass_value_as_reference() returns 1 for any argument.
	(arm_push_dummy_call): Add comments about not being able to test 
	arm_pass_value_as_reference() when using function wraller.
	(arm_gdbarch_init): call set_gdbarch_pass_value_as_reference() to
	set arm_pass_value_as_reference.
	* gdbtypes.h (TYPE_FLAG_DELPHI_ABI, TYPE_DELPHI_ABI): New macros.
	(TYPE_FLAG_NOTTEXT): Fix flag.
	(struct type): Fix unused bitfield.
	* gdbtypes.c (recursive_dump_type): Handle TYPE_FLAG_DELPHI_ABI.
	(check_stub_method): Add FIXMEs.
	* gdbarch.c (gdbarch_pass_value_as_reference): New function.  Call
	gdbarch's pass_value_as_reference.  This function should return true
	if the function passed the specified type is using the convention of
	passing structures in memory (passing in the address as a reference
	parameter).  
	(set_gdbarch_pass_value_as_reference): New function.  Set gdbarch's
	pass_value_as_reference field.
	(gdbarch_pass_value_as_reference_p): New function.  Return true if
	pass_value_as_reference is set.
	(struct gdbarch): Add new field pass_value_as_reference.
	(struct gdbarch startup_gdbarch): Initialize pass_value_as_reference
	field to default_pass_value_as_reference.
	(gdbarch_alloc): Initialize pass_value_as_reference field to
	default_pass_value_as_reference.
	(gdbarch_dump): Dump pass_value_as_reference.
	* gdbarch.h: Add prototypes.
	* arch-utils.c (default_pass_value_as_reference): New function.  
	Default for checking if value should be passed via addr.  Calls 
	default_stabs_argument_has_addr() (which uses
	DEPRECATED_REG_STRUCT_HAS_ADDR()).
	* arch-utils.h (default_pass_value_as_reference): Add prototype.
	* infcall.c (hand_function_call): Abort the function call if
	using_pass_value_as_reference() returns 1 for any argument.
	* value.c (using_pass_value_as_reference): New function.  Call 
	gdbarch_pass_value_as_reference() on the current gdbarch.
	* value.h (using_pass_value_as_reference): Add prototype.

2014-01-16  Kirill Lapshin  <Kirill.Lapshin@embarcadero.com>

	* remote.c (remote_wait): Fix problem in case Ctrl-C packet sent
	while GDB waiting for a first target state response.

2014-01-16  Kirill Lapshin  <Kirill.Lapshin@embarcadero.com>

	* remote.c (push_remote_macosx_target): Minor cleanup.
	* main.c (captured_main): Check against passed stopsocket path length
	exceeds maximum length allowed by OS. Report error and exit.

2014-01-15  Kirill Lapshin  <Kirill.Lapshin@embarcadero.com>

	* remote.c (remote_macosx_get_all_image_infos_addr): 
	Timeout 2secs*3 retries for "qShlibInfoAddr" target response.
	Getting remote dyld hook address is critical op, so we need to set 
	timeout against target not responding on this remote protocol command.

2014-01-14  Dawn Perchik  <dperchik@embarcadero.com>

	* defs.h (file_log, logging_enabled): Add file logging declarations.
	* utils.c (file_log): New global.  If non-NULL, logging is enabled.
	(logging_enabled): New function.  If a debug log was requested by the
	user, open the log file and return 1, else return 0.
	* main.c (captured_main): Check if file logging is enabled.  If so,
	echo command line options to log file.
	* arm-tdep.c: Remove file logging declarations.
	* breakpoint.c: Ditto.
	* infcall.c: Ditto.
	* remote.c: Ditto.

2014-01-13  Kirill Lapshin  <Kirill.Lapshin@embarcadero.com>

	Embarcadero specific fCall exception wrapper. 
	Final fix for possible fCall breakages after __dbk_fcall_wrapper code 
	generation changes.
	* infcall.c (hand_function_call): Code generation indepependent fCall
	wrapper function scanner added. Changes in fcall wrapper control points
	setting.

2014-01-10  Kirill Lapshin  <Kirill.Lapshin@embarcadero.com>

	Embarcadero specific fCall exception wrapper. 
	Fix fCall breakage after code generated by compiler was changed
	for try/except/finally statements.
	* infcall.c (hand_function_call): Precalculated fCall Wrapper stop
	points offsets changed. Comments for difference between 19.5 and 20.0.

2014-01-09  Dawn Perchik  <dperchik@embarcadero.com>

	* main.c (print_gdb_help): Add help meesage for new "--socketstop=NAME"
	GDB command line option.

2014-01-09  Kirill Lapshin  <Kirill.Lapshin@embarcadero.com>

	Embarcadero specific StopSocket manner as additional method
	for getting iOS target stopped safely.
	GDB opens UNIX domain socket if "--socketstop=<socket-name>"
	option was specified, then starts additional thread
	for receiving stop requests (actually just one byte 0x03) via opened
	socket. Thread is active only if target is running.
	* remote.c (push_remote_macosx_target): Changes for command line option
	usage instead of environment variable.
	(remote_wait): stopsocket_enable flag usage.
	* main.c (captured_main): stopsocket_enable flag and stopsocket_path 
	string variable set.
	* top.c (quit_force): StopSocket unlink on GDB exit. 

2013-12-19  Dawn Perchik  <dperchik@embarcadero.com>

	* gdbtypes.c (lookup_struct_elt_prop_field, lookup_struct_elt_fn_field):
	If type is a pointer, try to deref.  If resulting type isn't a struct,
	report error.  This echoes the behavior of lookup_struct_elt_type().

2013-12-12  Dawn Perchik  <dperchik@embarcadero.com>

	Cleanup: fix indentation and coding style. 

2013-12-11  Kirill Lapshin  <Kirill.Lapshin@embarcadero.com>

	Embarcadero specific StopSocket manner as additional method
	for getting iOS target stopped safely.
	GDB opening UNIX domain socket if "USEIOSGDBSTOPSOCKET"
	environment variable exists, then starting additional thread
	for receiving stop requests (actually just one byte 0x03) via opened
	socket. Thread is active only if target is running.
	* remote.c (SS_ServiceThread): New function.
	(remote_wait): Start/stop StopSocket service thread.
	(push_remote_macosx_target): Create StopSocket and wait for client. 

2013-12-07  Kirill Lapshin  <Kirill.Lapshin@embarcadero.com>

	Embarcadero specific fCall exception wrapper. 
	Fix issue for case if function to call address resolved via syms
	looks like THUMB raw address - with 0 bit set, abort fCall in this 
	case with error message.
	* infcall.c (hand_function_call): Add additional check.

2013-12-06  Kirill Lapshin  <Kirill.Lapshin@embarcadero.com>

	Embarcadero specific fCall exception wrapper.
	Making fCall Wrapper code arch independent and unified, 
	cleanup, GDB project conformance.
	TODO: get rid of hardcoded offsets in fCall Wrapper.
	* arch-utils.c (default_fcw_argument_push): New func.
	* arch-utils.h: Add prototype.    
	* gdbarch.c (gdbarch_fcw_argument_push, 
	set_gdbarch_fcw_argument_push): New gdbarch interface.
	* gdbarch.h: Add prototypes.
	* arm-tdep.c (arm_push_actual_fw_args): Declared as static now.
	(arm_fcw_argument_push): New function for gdbarch interface.
	* arm-tdep.h (arm_push_actual_fw_args): Prototype removed as export
	not needed now.
	* infcall.c (fcw_argument_push): Moved to ARM tdeps as gdbarch
	interface.
	(hand_function_call): Unused code cleanup caused by FCWrapper 
	algorithm changes.
	* breakpoint.c (bpstat_what): gdbarch_fcw_argument_push interface
	usage.

2013-12-05  Kirill Lapshin  <Kirill.Lapshin@embarcadero.com>

	Delphi vendor specific fCall exception wrapper. 
	Fix forgotten code branch - should finally fix issue with far 
	functions - i.e when offset to function is bigger 23 bits.
	TODOs: move ARM-specific pieces to arm-tdep.c, various calling 
	conventions, float point parameters and result.
	* infcall.c (hand_function_call): Forgotten code disabled.

2013-12-05  Kirill Lapshin  <Kirill.Lapshin@embarcadero.com>

	Delphi vendor specific fCall exception wrapper. 
	Fix problem with result extraction in case function without arguments.
	TODOs: move ARM-specific pieces to arm-tdep.c, various calling 
	conventions, float point parameters and result.
	* infcall.c (fcw_argument_push): LR/PC setter code moved outside
	parameter pusher code block.

2013-12-04  Kirill Lapshin  <Kirill.Lapshin@embarcadero.com>

	Delphi vendor specific fCall exception wrapper. 
	Fix problem when offset to fCalled function is bigger than bl
	instruction allowed - i.e. more than 23 bits + sign bit.
	CPP fCall wrapping enabled. Changes related to RTL export syms for 
	fCall wrapper.
	TODOs: move ARM-specific pieces to arm-tdep.c, various calling 
	conventions, float point parameters and result.
	* infcall.c (hand_function_call): Fix fCall wrapper against problem
	when bl THUMB command cannot be used. CPP fCall Wrapper.

2013-12-03  Kirill Lapshin  <Kirill.Lapshin@embarcadero.com>

	Workaround against issue with GDB crash on evaluation variables 
	resolved via location lists.
	* dwarf2read.c (var_decode_location): Mark variables adressed via 
	location lists as unresolved.

2013-11-29  Kirill Lapshin  <Kirill.Lapshin@embarcadero.com>

	Fix fCall issue on iOS 6.x and CPP app -  disable lookup 
	ObjC Classes as part of ordinary symbol resolution by default - 
	may lead to unpredictable evaluation result or hang in C/C++ case.
	May be enabled back, if required with corresponding 
	"set lookup-objc-class on" GDB command. 
	* objc-lang.c: Initialize variable lookup_objc_class_p
	to 0 by default.

2013-11-28  Kirill Lapshin  <Kirill.Lapshin@embarcadero.com>

	Fix GDB stopped debug session on assert in case fully qualified name 
	cannot be built for overloaded function.
	* valops.c (find_oload_champ_namespace_loop): Assert replaced to
	error message to keep debug session alive.

2013-11-28  Kirill Lapshin  <Kirill.Lapshin@embarcadero.com>

	Fix case in fCall wrapper against THUMB bl instruction cannot 
	be used due to offset exceeds 24 bit - most likely it is 
	call to function in dylibs loaded in higher memory.
	* infcall.c (hand_function_call): Check if calculated relative
	offset exceeds 24-bit, disable fCall wrapper in this case.

2013-11-27  Kirill Lapshin  <Kirill.Lapshin@embarcadero.com>

	Delphi vendor specific fCall exception wrapper. 
	Argument push and get result. 
	Enabled by default unless DONT_USE_FCALL_WRAPPER environment 
	variable is set.
	TODOs: move ARM-specific pieces to arm-tdep.c, various calling 
	conventions, float point parameters and result.
	* infcall.c (hand_function_call): Delphi RTL fCall wrapper minsym
	lookup and usage.
	(fcw_argument_push): Arch independent argument push helper function.
	* infcall.h (fcw_argument_push): Export.
	* breakpoint.c (bpstat_what): Call fcw_argument_push.
	* arm-tdep.c (arm_push_actual_fw_args): Argument push helper for
	fCall wrapper. New function.
	* arm-tdep.h (arm_push_actual_fw_args): Export.

2013-11-26  Kirill Lapshin  <Kirill.Lapshin@embarcadero.com>

	Fix fCall instabilities for CPP case.
	* arm-tdep.c (arm_push_dummy_call): Fix bp_addr THUMB bit.
	* infcall.c (hand_function_call): Use RTL known points instead of
	app global objfile entry point.

2013-11-22  Kirill Lapshin  <Kirill.Lapshin@embarcadero.com>

	Fix difference between stack frames count reported by 
	-stack-list-frames and -stack-info-depth MI commands.
	* arm-tdep.c (arm_macosx_fast_show_stack): Count first 
	frame in chain even in case if its FP=0.

2013-11-21  Kirill Lapshin  <Kirill.Lapshin@embarcadero.com>

	Fix original ARM cpsr contents may be touched by fCall.
	* infcall.c (hand_function_call): Save before/restore after fCall 
	global cpsr_reg variable.

2013-11-21  Kirill Lapshin  <Kirill.Lapshin@embarcadero.com>

	Fix potential GDB crash on assert.
	* cp-namespace.c (lookup_namespace_scope): Handle Pascal scope 
	separator.

2013-11-21  Kirill Lapshin  <Kirill.Lapshin@embarcadero.com>

	Fix problem with CPP exception notifications if RTL has debug syms.
	* breakpoint.c (print_syms_for_block): Fix inverted isdelphi 
	parameter meaning.

2013-11-17  Kirill Lapshin  <Kirill.Lapshin@embarcadero.com>

	Fix problem with CPP exception notifications if RTL has debug syms.
	* breakpoint.c (print_syms_for_block): Take in account current
	language.  New parameter isdelphi.
	(print_it_typical): Pass new parameter isdelphi.

2013-11-15  Kirill Lapshin  <Kirill.Lapshin@embarcadero.com>

	Enable CPP exception notifications support in debugger.
	* breakpoint.c (set_dbgexcnotify): Use export _CPPDbgExcNotify 
	symbol to set internal bkpt on CPP RTL exception hook.
	(print_it_typical): Report CPP exception notification with 
	parameters passed by CPP RTL as *stopped event. 

2013-11-14  Kirill Lapshin  <Kirill.Lapshin@embarcadero.com>

	Fix crash in case 'ab'+'bc'-like expressions evaluation. 
	* infcall.c (hand_function_call): fCall wrapper temporarily 
	disabled by default, but may be enabled with USE_FCALL_WRAPPER 
	env variable.

2013-11-14  Dawn Perchik  <dperchik@embarcadero.com>

	* symtab.c (lookup_symbol_aux): Disable code from merge with
	git commit 15850b5bf166265f965f0246991ce8db81bfc15c; merge conflicts
	caused broken type state.

2013-11-14  Dawn Perchik  <dperchik@embarcadero.com>

	* varobj.c (c_value_of_variable): If a struct has the name
	"System::UnicodeString", go ahead and try to evaluate it.

2013-11-14  Dawn Perchik  <dperchik@embarcadero.com>

	* gdbtypes.c (check_typedef): Report error if pointer has NULL
	target_type.

2013-11-14  Dawn Perchik  <dperchik@embarcadero.com>

	* c-valprint.c (c_val_print): Add support for printing Delphi strings
	in C++.

2013-11-12  Dawn Perchik  <dperchik@embarcadero.com>

	* eval.c (evaluate_subexp_standard): If function call evaluation is
	attempted on a non-function, report error to work-around the lack of
	exception recovery.

2013-11-12  Dawn Perchik  <dperchik@embarcadero.com>

	Add minimal support for multi-byte characters.
	* c-lang.c (c_emit_char): If value exceeds 0xff, print as \0xdfdf.
	* c-valprint.c (textual_element_type): Recognize char16_t as textual.
	(c_val_print): Use unpack_char to extract character from data.
	* p-valprint.c (unpack_char): Move to value.c.
	* value.c (unpack_char): Moved from p-valprint.c and made external.
	* value.h (unpack_char): Add prototype.

2013-11-12  Dawn Perchik  <dperchik@embarcadero.com>

	* p-exp.y (yylex): Always lookup cp_lookup_symbol_nonlocal
	even when current_type is set.

2013-11-11  Dawn Perchik  <dperchik@embarcadero.com>

	Merge git commit cd50aca8aa658db9a8b3fba513361bcf990aa96b
	from gdb trunk for namespace support:
	2010-03-10  Sami Wagiaalla  <swagiaal@redhat.com>
	PR C++/11236:
	* cp-namespace.c (cp_add_using): Deleted.
	(cp_add_using_directive): Use obstack allocations.
	Merged the function cp_add_using into this one.
	Added 'struct obstack *' argument.
	(cp_scan_for_anonymous_namespaces): Updated.
	* cp-support.h: Updated.
	* dwarf2read.c (read_import_statement): Updated.
	(read_namespace): Updated.

2013-11-11  Dawn Perchik  <dperchik@embarcadero.com>

	* dwarf2read.c (process_die): Reenable namepsace import handling;
	now implemented.
	(read_import_statement): Use "." for Pascal namespace operator.
	* p-exp.y (yylex): If unable to lookup symbol, try looking in imported
	namespaces via cp_lookup_symbol_nonlocal().
	Use "." for Pascal namespace operator.

2013-11-08  Dawn Perchik  <dperchik@embarcadero.com>

	Merge git commit b177db0955ebc90811e9aea6c04f623cc0140236
	from gdb trunk for namespace support:
	2010-02-05  Sami Wagiaalla  <swagiaal@redhat.com>
	PR c++/7935:
	* cp-support.h: Added char* alias element to using_direct data
	struct.
	(cp_add_using): Added char* alias argument.
	(cp_add_using_directive): Ditto.
	* cp-namespace.c: Updated with the above changes.
	(cp_lookup_symbol_imports): Check for aliases.
	* dwarf2read.c (read_import_statement): Figure out local alias
	for the import and pass it on to cp_add_using.
	(read_namespace): Pass alias argument to cp_add_using.

2013-11-08  Dawn Perchik  <dperchik@embarcadero.com>

	Merge git commit c5fb0680ec87515350610b2d03c822d3af52454d
	from gdb trunk for namespace support:
	2010-01-26  Sami Wagiaalla  <swagiaal@redhat.com>
	* cp-namespace.c (cp_lookup_symbol_namespace): Added
	search_parent argument.
	(cp_add_using): Initialize 'searched' field.
	(reset_directive_searched): New function.
	* cp-support.h: Add 'searched' field to using_direct struct.
	(cp_lookup_symbol_imports): Ditto.
	* cp-namespace.c (cp_lookup_symbol_imports): Ditto.
	Perform recursive search.
	Implement non parent search.
	* valops.c (value_maybe_namespace_elt): Updated.

2013-11-08  Dawn Perchik  <dperchik@embarcadero.com>

	Merge git commit 15850b5bf166265f965f0246991ce8db81bfc15c
	from gdb trunk for namespace support:
	2010-01-26  Sami Wagiaalla  <swagiaal@redhat.com>
	PR gdb/10929:
	* dwarf2read.c (read_lexical_block_scope): Create blocks for
	scopes which contain using directives even if they contain no
	declarations.
	* symtab.c (lookup_symbol_aux): Pass lowest level block to
	la_lookup_symbol_nonlocal.
	* cp-namespace.c (cp_lookup_symbol_nonlocal): call
	cp_lookup_symbol_namespace.
	(cp_lookup_symbol_namespace): Perform an import lookup at every
	block level.
	(cp_lookup_symbol_imports): New function.
	(cp_lookup_symbol_in_namespace): New function.

2013-11-08  Dawn Perchik  <dperchik@embarcadero.com>

	Merge cvs PatchSet 60275 from gdb trunk for namespace support
	(git commit 194cf036f7789505342cf1abec5bbce52c2d10de):
	2009-11-09  Cary Coutant  <ccoutant@google.com>
	* dwarf2read.c (read_import_statement): Don't clobber original cu.

2013-11-08  Dawn Perchik  <dperchik@embarcadero.com>

	Merge cvs PatchSet 59790 from gdb trunk for namespace support
	(git commit 1c4b5ca2c97005d02807206769dc2184a7191b66):
	2009-10-14  Cary Coutant  <ccoutant@google.com>
	* dwarf2read.c (read_import_statement): Call follow_die_ref_or_sig.

2013-11-08  Dawn Perchik  <dperchik@embarcadero.com>

	Merge cvs PatchSet 57901 from gdb trunk for namespace support
	(git commit 1048f3af1d2910781dbf28dbbe67b9eae499567c):
	2009-07-07  Sami Wagiaalla  <swagiaal@redhat.com>
	* cp-support.h (struct using_direct): Rename members inner and
	outer to import_src, and import_dest respectively.
	* cp-namespace.c (cp_add_using_directive): Update.
	(cp_add_using): Update.
	(cp_copy_usings): Update.
	(cp_lookup_symbol_namespace): Update.
	(cp_scan_for_anonymous_namespaces): Update.
	* cp-support.c (make_symbol_overload_list_using): Update.
	* cp-support.h (cp_add_using_directive, cp_add_using): Rename
	arguments from inner and outer to src and dest respectively.
	* cp-namespace.c (cp_add_using_directive): Ditto.
	(cp_add_using): Ditto.

2013-11-08  Dawn Perchik  <dperchik@embarcadero.com>

	Merge git commit 8b4d92671d2d7c8b3bad4d9e576280e9b8570fe8
	from gdb trunk for namespace support:
	2008-08-21  Daniel Jacobowitz  <dan@codesourcery.com>
	* dwarf2read.c (processing_current_prefix): Delete static
	variable.
	(process_full_comp_unit): Do not set processing_current_prefix.
	(dwarf2_full_name): New function.
	(read_func_scope): Do not set processing_current_prefix.  Use
	determine_prefix.
	(read_structure_type): Do not set processing_current_prefix.  Remove
	unused inner cleanup.
	(process_structure_scope): Do not set processing_current_prefix.
	(read_enumeration_type): Use dwarf2_full_name.
	(determine_class_name): Return a const char *.  Put the result
	on the objfile obstack.  Use dwarf2_full_name.
	(read_namespace_type): New function.
	(read_namespace): Do not create the type here.  Use
	determine_prefix.
	(read_typedef): Use dwarf2_full_name.  Do not pass the name
	to init_type.
	(read_base_type): Do not pass the name to init_type.  Handle
	TYPE_FLAG_NOSIGN.
	(read_unspecified_type): Do not pass the name to init_type.
	(new_symbol): Use dwarf2_full_name instead of
	processing_current_prefix.
	(read_type_die): Do not set processing_current_prefix.  Handle
	DW_TAG_namespace.
	(determine_prefix): Handle specifications.  Return the result
	on the objfile obstack.  Handle unions correctly.

2013-11-08  Kirill Lapshin  <Kirill.Lapshin@embarcadero.com>

	Fix crash in case addr_string not set (or NULL) for some breakpoint. 
	* breakpoint.c (bpstat_what): Check against breakpoint at location 
	addr_string not NULL added.

2013-11-08  Kirill Lapshin  <Kirill.Lapshin@embarcadero.com>

	Fix problem with ARM CPSR register reported by target differenty
	starting from iOS 7. 
	* regcache.c (read_register): Handling ARM_PS_REGNUM differently
	if target is iOS 7. cpsr_reg static variable definition and usage.
	* remote.c (remote_wait): Set cpsr_reg variable in case target
	reported CPSR register as 16th register in why_stopped response.

2013-11-07  Dawn Perchik  <dperchik@embarcadero.com>

	Merge git commit 4adbb5381f03ee5bb4bcd40dd983d461ec0c72f0
	from gdb trunk for namespace support:
	2008-08-21  Daniel Jacobowitz  <dan@codesourcery.com>
	* buildsym.c (add_symbol_to_list): Do not call
	cp_scan_for_anonymous_namespaces here.
	(finish_block): Do not call cp_set_block_scope here.
	* cp-namespace.c (processing_has_namespace_info)
	(processing_current_prefix): Delete.
	(cp_initialize_namespace): Do not initialize
	processing_has_namespace_info.
	(cp_scan_for_anonymous_namespaces): Use SYMBOL_DEMANGLED_NAME.  Do
	not check processing_has_namespace_info.
	(cp_set_block_scope): Take prefix and namespace info flag as
	arguments.  Honor namespaces regardless of a demangled name.
	* cp-support.h (processing_has_namespace_info)
	(processing_current_prefix): Delete declarations.
	(cp_set_block_scope): Update prototype.
	* dwarf2read.c (processing_has_namespace_info)
	(processing_current_prefix): New static variables.
	(read_file_scope): Initialize processing_has_namespace_info.
	(read_func_scope): Call cp_set_block_scope for C++.
	(new_symbol): Call cp_scan_for_anonymous_namespaces for C++.
	* symtab.c (symbol_demangled_name): Accept a const argument.
	* symtab.h (symbol_demangled_name): Update prototype.

2013-11-07  Dawn Perchik  <dperchik@embarcadero.com>

	Merge cvs PatchSet 57740 from gdb trunk for namespace support
	(git commit d28fa869c6bf9dd6bd25f769065187f10df1fb55):
	2009-06-29  Sami Wagiaalla  <swagiaal@redhat.com>
	* dwarf2read.c (read_import_statement): Properly set import location
	and destination.
	* cp-support.h (cp_add_using, cp_add_using_directive): Now take char*
	inner, char* outer arguments. Updated callers.

2013-11-07  Dawn Perchik  <dperchik@embarcadero.com>

	Merge cvs PatchSet 57649 from gdb trunk for namespace support
	(git commit f5fadb7440cde9a5f42c43eceaa0860cf8aaa9a4):
	2009-06-23  Sami Wagiaalla  <swagiaal@redhat.com>
	* dwarf2read.c (process_die): Handle import statements
	(DW_TAG_imported_declaration, case DW_TAG_imported_module)
	(read_import_statement): New.
	(read_func_scope): Update using_directives to point to current context
	(read_lexical_block_scope): Ditto.
	* cp-support.h: Added prototype for cp_add_using.
	* cp-namespace.c: Removed local context_stack.
	(cp_initialize_namespace): Deleted.
	(cp_finalize_namespace): Deleted.
	(cp_add_using_directive): Use using_directives instead of using_list.
	(cp_add_using): No longer static.
	* buildsym.h: Created global using_direct variable.
	Created using_direct variable in context_stack.
	* buildsym.c (finish_block): Set using directives for the block under
	construction.
	(start_symtab): Removed call to cp_initialize_namespace().
	(end_symtab): Removed call to cp_finalize_namespace().
	(push_context): Save and reset using_directives.
	* block.c (block_using): Return using directives for given
	block instead of static block.

2013-11-07  Dawn Perchik  <dperchik@embarcadero.com>

	Merge git commit 24bc8226fe07196328e8b543eee6559861f81f2b
	from gdb trunk for namespace support: 
	2008-08-20  Daniel Jacobowitz  <dan@codesourcery.com>
	* dwarf2read.c (die_specification, dwarf2_extension, follow_die_ref):
	Make the dwarf2_cu * parameter output as well as input.  Update it if
	we follow a reference to another CU.
	(read_func_scope, determine_class_name, namespace_name, dwarf2_attr)
	(die_type, die_containing_type): Update calls to changed functions.
	Use the returned CU along with the returned DIE.
	(read_namespace): Use dwarf2_attr instead of dwarf2_extension.

	Merge git commit 053209011a434bda410d76744d2518ce79b31602
	from gdb trunk for namespace support: 
	2006-11-02  Daniel Jacobowitz  <dan@codesourcery.com>
	* dwarf2read.c (struct dwarf2_per_cu_data): Update comment.
	(load_full_comp_unit): Take OBJFILE argument and use it.
	(dwarf2_build_psymtabs_hard): Skip partial units.
	(process_queue): Pass OBJFILE to load_full_comp_unit.  Check
	type_hash for read in CUs.  Test psymtab for NULL.

2013-11-07  Dawn Perchik  <dperchik@embarcadero.com>

	Merge git commit 22ac0cdc99619caf96d5095503cec33ffa86d5fd
	from gdb trunk for namespace support: 
	2008-08-20  Daniel Jacobowitz  <dan@codesourcery.com>
	* dwarf2read.c (queue_comp_unit): Take an objfile argument.  Read
	in the DIEs here.
	(process_queue): Do not read in the DIEs here.
	(psymtab_to_symtab_1): Update call to queue_comp_unit.
	(read_full_die): Do not call queue_comp_unit from here.
	(maybe_queue_comp_unit): New function.
	(follow_die_ref): Use it.

2013-11-07  Dawn Perchik  <dperchik@embarcadero.com>

	Merge git commit e1cf6c01b05c25a20cbbbf5f732ea50b3e00a264
	from gdb trunk for namespace support: 
	2008-05-04  Daniel Jacobowitz  <dan@codesourcery.com>
	* dwarf2read.c (struct dwarf2_cu): Add type_hash.
	(struct die_info): Remove type.
	(read_type_die, read_typedef, read_base_type, read_subrange_type)
	(read_structure_type, read_enumeration_type, read_array_type)
	(read_tag_pointer_type, read_tag_ptr_to_member_type)
	(read_tag_reference_type, read_tag_const_type, read_tag_volatile_type)
	(read_tag_string_type, read_subroutine_type, read_set_type)
	(read_unspecified_type): Delete prototypes.  Remove check for
	already-loaded type.  Return the new type.
	(set_die_type): Return the new type.
	(reset_die_and_siblings_types): Delete.
	(load_comp_unit, load_full_comp_unit): Set type_hash.
	(process_queue): Remove call to reset_die_and_siblings_types.
	(process_die): Do not read most types here.  Use read_type_die
	for others.
	(read_func_scope, dwarf2_add_member_fn): Use read_type_die.
	(quirk_gcc_member_function_pointer): Return the new type.
	(process_structure_scope, process_enumeration_scope): Use
	get_die_type and read the DIE's type.
	(read_full_die): Do not initialize die->type.
	(tag_type_to_type): Use read_type_die.
	(read_type_die): Check for already defined types.  Return the
	type.
	(determine_prefix): Use get_die_type.
	(set_die_type): Return the type.
	(get_die_type): Take a CU argument.  Check for no type_hash.

2013-11-07  Dawn Perchik  <dperchik@embarcadero.com>

	Merge git commit 7f853963ebeb1147d77ed4b8ec1f4b7dc0bb4b16
	from gdb trunk for namespace support: 
	2008-08-20  Daniel Jacobowitz  <dan@codesourcery.com>
	* dwarf2read.c (struct attribute): Move earlier.
	(struct die_info): Change attrs to a trailing array.
	(dwarf_alloc_die): Take the number of attributes.  Allocate space
	for them.
	(read_full_die): Update call to dwarf_alloc_die.  Do not manually
	allocate attributes.

2013-11-07  Dawn Perchik  <dperchik@embarcadero.com>

	Merge git commit 7cdd323d1e65b7345ff2ddc746de8899a710b121
	from gdb trunk for namespace support: 
	2008-08-20  Daniel Jacobowitz  <dan@codesourcery.com>
	* dwarf2read.c (REF_HASH_SIZE): Delete.
	(struct dwarf2_cu): Replace die_ref_table with die_hash.
	(struct die_info): Remove next_ref.
	(store_in_ref_table): Remove offset argument.  Rewrite to use
	htab_find_slot_with_hash.
	(die_hash, die_eq): New.
	(read_comp_unit): Allocate the die_hash.
	(read_die_and_children): Update call to store_die_ref.
	(follow_die_ref): Rewrite to use htab_find_with_hash.

2013-11-07  Dawn Perchik  <dperchik@embarcadero.com>

	Merge git commit 8b4b76cfc28b80ca1f0d475f9f9fb9757d8b2951
	from gdb trunk for namespace support: 
	2008-08-20  Daniel Jacobowitz  <dan@codesourcery.com>
	* dwarf2read.c (free_die_list, copy_die): Delete.
	(dwarf_alloc_die): Take a CU argument.  Allocate the new DIE
	on the obstack.
	(read_full_die): Update call to dwarf_alloc_die.  Allocate
	attributes on the CU obstack.
	(free_one_comp_unit): Do not call free_die_list.

2013-11-07  Dawn Perchik  <dperchik@embarcadero.com>

	Merge git commit c159f64450f6167cfd625ecb16a04c752dbe3ec9
	from gdb trunk for namespace support: 
	2008-08-20  Daniel Jacobowitz  <dan@codesourcery.com>
	* dwarf2read.c (read_die_and_children): Ignore NULL DIEs.
	(read_die_and_siblings): Likewise.  Do not add padding DIEs to the
	sibling list.
	(read_full_die): Do not allocate DIEs for abbrev 0.
	(follow_die_ref): Correct error message.

2013-11-05  Dawn Perchik  <dperchik@embarcadero.com>

	* varobj.c (language_specific): initialize C++ using C functions
	to disable fake children in C++
	(CPLUS_FAKE_CHILD): always return 0

2013-11-05  Dawn Perchik  <dperchik@embarcadero.com>

	* dwarf2read.c (process_die): disable broken namespace support.

2013-10-31  Kirill Lapshin  <Kirill.Lapshin@embarcadero.com>

	Delphi vendor specific fCall exception wrapper. 
	TODOs: Argument pusher, move ARM-specific pieces to arm-tdep.c.
	* infcall.c (hand_function_call): RTL fCall wrapper usage.
	Additional check against wrapper function may not present
	in RTL - old fCall manner will chosen.

2013-10-31  Kirill Lapshin  <Kirill.Lapshin@embarcadero.com>

	Fix problem with exception notification in case RTL debug
	info not available. 
	* breakpoint.c (print_it_typical): Print DbgExcNotify parameters 
	without verification with block syms. If RTL symbols available 
	safe path will be used.

2013-10-30  Dawn Perchik  <dperchik@embarcadero.com>

	* p-exp.y: Treat Dalphi units (namespaces) as structs for the
	purposes of lookup (i.e. don't check for in_parse_field).  If we
	that saw_structop was set and we have an IDENT, update current_type
	to the member.
	(saw_structop): make global so we can test for it in parsing rules.

2013-10-30  Dawn Perchik  <dperchik@embarcadero.com>

	* expression.h (parse_expression_in_context): Delete prototype.
	* parse.c (parse_expression_in_context): Delete.

	Merge cvs PatchSet 52043 from gdb trunk for parsing of members
	(git commit 2d8de45015714394035c02bb6f2c5c4d4e86d786):
	2008-06-06  Tom Tromey  <tromey@redhat.com>
	* value.h (evaluate_subexpression_type, extract_field_op):
	Declare.
	* printcmd.c (_initialize_printcmd): Use expression_completer for
	'p', 'inspect', 'call'.
	* parser-defs.h (parse_field_expression): Declare.
	* parse.c: Include exceptions.h.
	(in_parse_field, expout_last_struct): New globals.
	(mark_struct_expression): New function.
	(prefixify_expression): Return int.
	(prefixify_subexp): Return int.  Use expout_last_struct.
	(parse_exp_1): Update.
	(parse_exp_in_context): Add 'out_subexp' argument.  Handle
	in_parse_field.
	(parse_field_expression): New function.
	* expression.h (parse_field_expression): Declare.
	(in_parse_field): Likewise.
	* eval.c (evaluate_subexpression_type): New function.
	(extract_field_op): Likewise.
	* completer.h (expression_completer): Declare.
	* completer.c (expression_completer): New function.
	(count_struct_fields, add_struct_fields): New functions.
	* c-exp.y (yyparse): Redefine.
	(COMPLETE): New token.
	(exp): New productions.
	(saw_name_at_eof, last_was_structop): New globals.
	(yylex): Return COMPLETE when needed.  Recognize in_parse_field.
	(c_parse): New function.
	* breakpoint.c (_initialize_breakpoint): Use expression_completer
	for watch, awatch, and rwatch.
	* Makefile.in (parse.o): Depend on exceptions_h.

2013-10-30  Dawn Perchik  <dperchik@embarcadero.com>

	* p-exp.y: Add additional debugging output.
	* parse.c: Likewise.

2013-10-29  Dawn Perchik  <dperchik@embarcadero.com>

	* infcall.c (hand_function_call): Add temporary hack to allow fcall to
	continue to work without requiring the RTL via setting NO_FCALL_WRAPPER
	in the environment.

2013-10-29  Kirill Lapshin  <Kirill.Lapshin@embarcadero.com>

	Delphi vendor specific fCall exception wrapper. 
	TODOs: Argument pusher, move ARM-specific pieces to arm-tdep.c
	* infcall.c (hand_function_call): Use Delphi vendor specific fCall
	wrapper.
	* infrun.c (handle_inferior_event): handle BPSTAT_WHAT_SINGLE_FCALL
	fCall wrapper action.
	* breakpoint.c (bpstat_what): Service fCall wrapper actions.
	* breakpoint.h: BPSTAT_WHAT_SINGLE_FCALL action added to
	bpstat_what_main_action enum.

2013-10-28  Dawn Perchik  <dperchik@embarcadero.com>

	Merge cvs PatchSet 44512 from gdb trunk for ptr-to-member type codes
	(git commit 0dfdb858909fdb7013df8eef51cfb050900fc338):
	2007-01-03  Daniel Jacobowitz  <dan@codesourcery.com>
	* NEWS: Mention pointer to member improvements.
	* Makefile.in (gnu-v3-abi.o): Delete special rule.
	(eval.o, gnu-v3-abi.o, ia64-tdep.o): Update.
	* ada-valprint.c (ada_print_scalar): Update for new type codes.
	* c-typeprint.c (c_print_type): Update for new type codes.
	(c_type_print_varspec_prefix, c_type_print_varspec_suffix)
	(c_type_print_base): Likewise.
	(c_type_print_args): Rewrite.
	* c-valprint.c (c_val_print): Update for new type codes.  Remove
	support for references to members.  Treat methods like functions.
	* cp-abi.c (cplus_print_method_ptr, cplus_method_ptr_size)
	(cplus_make_method_ptr, cplus_method_ptr_to_value): New.
	* cp-abi.h (cplus_print_method_ptr, cplus_method_ptr_size)
	(cplus_make_method_ptr, cplus_method_ptr_to_value): New prototypes.
	(struct cp_abi_ops): Add corresponding members.
	* cp-valprint.c (cp_print_class_method): Delete.
	(cp_find_class_member): New function.
	(cp_print_class_member): Use it.  Simplify support for bogus
	member pointers.
	* dwarf2read.c (quirk_gcc_member_function_pointer): Use
	lookup_methodptr_type.
	(read_tag_ptr_to_member_type): Likewise, and lookup_memberptr_type.
	* eval.c (evaluate_subexp_standard): Implement EVAL_SKIP for
	OP_SCOPE.  Update call to value_aggregate_elt.  Rewrite member
	pointer support.
	(evaluate_subexp_for_address): Handle OP_SCOPE explicitly.  Handle
	references returned by user defined operators.
	* f-typeprint.c (f_print_type, f_type_print_varspec_prefix)
	(f_type_print_varspec_suffix): Remove support for member pointers.
	* gdbtypes.c (lookup_memberptr_type): Renamed from lookup_member_type
	and adjusted.
	(smash_to_memberptr_type): Likewise, from smash_to_member_type.
	(lookup_methodptr_type): New.
	(rank_one_type): Adjust for TYPE_CODE_MEMBERPTR.
	(recursive_dump_type): Update for new types.
	* gdbtypes.h (enum type_code): Replace TYPE_CODE_MEMBER with
	TYPE_CODE_MEMBERPTR and TYPE_CODE_METHODPTR.
	(lookup_memberptr_type, lookup_methodptr_type)
	(smash_to_memberptr_type): New prototypes.
	(smash_to_method_type): Formatting fix.
	(lookup_member_type, smash_to_member_type): Delete prototypes.
	* gnu-v3-abi.c (gnuv3_get_vtable, gnuv3_get_virtual_fn): New.
	Do not rely on debug information for the vptr or the method's
	enclosing type.  Handle function descriptors for IA64.
	(gnuv3_virtual_fn_field): Rewrite using the new functions.
	(gnuv3_find_method_in, gnuv3_print_method_ptr)
	(gnuv3_method_ptr_size, gnuv3_make_method_ptr)
	(gnuv3_method_ptr_to_value): New.
	(init_gnuv3_ops): Set new members of gnu_v3_abi_ops.
	* hpread.c (hpread_type_lookup): Update for new types.
	* infcall.c (value_arg_coerce): Likewise.
	* m2-typeprint.c (m2_print_type): Remove explicit support
	for member pointers.
	* m2-valprint.c (m2_val_print): Likewise.
	* p-typeprint.c (pascal_type_print_varspec_prefix)
	(pascal_type_print_varspec_suffix, pascal_type_print_base): Likewise.
	* p-valprint.c (pascal_val_print): Likewise.
	(pascal_object_print_class_method, pascal_object_print_class_member):
	Delete.
	* p-lang.h (pascal_object_print_class_method)
	(pascal_object_print_class_member): Delete prototypes.
	* stabsread.c (read_type): Update for new types.
	* typeprint.c (print_type_scalar): Likewise.
	* valops.c (value_struct_elt_for_reference, value_namespace_elt)
	(value_maybe_namespace_elt, value_aggregate_elt): Add want_address
	argument.  Construct a pointer to member if the address of a
	function or data member is requested.
	(value_cast_pointers): Don't modify the input value.
	(value_cast): Adjust pointer to member handling for new types.
	Allow null pointer to member constants.  Don't modify the input
	value.
	(value_ind): Remove pointer to member check.  Handle function
	descriptors for function pointers.
	(value_struct_elt, value_find_oload_method_list, check_field):
	Remove pointer to member checks.
	* value.c (unpack_long): Allow pointers to data members.
	(value_from_longest): Allow member pointers.
	* value.h (value_aggregate_elt): Add want_address.
	* varobj.c (c_variable_editable): Remove check for members.
	* gdbarch.sh: Add vtable_function_descriptors and vbit_in_delta.
	* ia64-tdep.c (ia64_convert_from_func_ptr_addr): Handle descriptors
	in virtual tables.
	(ia64_gdbarch_init): Call set_gdbarch_vtable_function_descriptors.
	* c-lang.h (cp_print_class_method): Delete prototype.
	* arm-tdep.c (arm_gdbarch_init): Call set_gdbarch_vbit_in_delta.
	* mips-tdep.c (mips_gdbarch_init): Likewise.
	* gdbarch.c, gdbarch.h: Regenerated.

2013-10-28  Dawn Perchik  <dperchik@embarcadero.com>

	Merge cvs PatchSet 39637 from gdb trunk for TYPE_CODE_FLAGS support
	(git commit ffd21e8ed4768e89af6aaabe42bf0cad06d6a24d):
	2006-01-18  Mark Kettenis <kettenis@gnu.org>
	Based on a previous patch form Michal Ludvig:
	* gdbtypes.c (append_flags_type_flag, init_flags_type): New
	functions.
	(is_integral_type, rank_one_type, recursive_dump_type): Add
	support for TYPE_CODE_FLAGS.
	* gdbtypes.h (enum type_code): Add TYPE_CODE_FLAGS.
	(append_flags_type_field, init_flags_type): New prototypes.
	* ada-valprint.c (ada_val_print_1): Add support for
	TYPE_CODE_FLAGS.
	* c-valprint.c (c_val_print): Likewise.
	* f-valprint.c (f_val_print): Likewise.
	* p-valprint.c (pascal_val_print): Likewise.
	* valprint.c (val_print_type_code_flags): New function.
	* valprint.h (val_print_type_code_flags): New prototype.
	* value.c (unpack_long, value_from_longest): Add support for
	TYPE_CODE_FLAGS.

2013-10-28  Dawn Perchik  <dperchik@embarcadero.com>

	Merge cvs PatchSet 45866 from gdb trunk to remove hpacc support
	(git commit 5cdc6e0f8ff1839ba9eead592f613dbdf8163c09):
	2007-04-10  Daniel Jacobowitz <drow@false.org>
	* Makefile.in (SFILES): Remove hpacc-abi.c.
	(COMMON_OBS): Remove hpacc-abi.o.
	(ALLDEPFILES): Remove hpread.c and $(HPREAD_SOURCE).
	(hpacc-abi.o, hpread.o): Delete rules.
	* somread.c: Delete extern declarations from hpread.c.
	(som_symfile_read): Do not call do_pxdb or hpread_build_psymtabs.
	(som_symfile_finish): Do not call hpread_symfile_finish.
	(som_symfile_init): Do not call hpread_symfile_init.
	* config/pa/hppa64.mt (TDEPFILES): Remove hpread.o.
	* config/pa/hppahpux.mt (TDEPFILES): Likewise.
	* hpacc-abi.c, hpread.c: Deleted.

	Merge cvs PatchSet 48967 from gdb trunk to remove hpacc support
	(git commit 1ef9ecdb328811d7729dc91421fab659a4e2d945):
	2007-11-02  Ulrich Weigand <uweigand@de.ibm.com>
	* gdbtypes.h (struct cplus_struct_type): Remove runtime_ptr member.
	(TYPE_RUNTIME_PTR, TYPE_VTABLE, TYPE_HAS_VTABLE,
	TYPE_PRIMARY_BASE, TYPE_VIRTUAL_BASE_LIST): Remove macros.
	(HP_ACC_VFUNC_START, HP_ACC_VBASE_START, HP_ACC_TYPEINFO_OFFSET,
	HP_ACC_TOP_OFFSET_OFFSET): Likewise.
	(has_vtable, primary_base_class, virtual_base_list_length,
	virtual_base_list_length_skip_primaries, virtual_base_index,
	virtual_base_index_skip_primaries, class_index_in_primary_list,
	count_virtual_fns): Remove prototypes.
	* gdbtypes.c (has_vtable, primary_base_class, current_vbase_list,
	virtual_base_list_aux, virtual_base_list, virtual_base_list_length,
	virtual_base_list_length_skip_primaries, virtual_base_index,
	virtual_base_index_skip_primaries, class_index_in_primary_list,
	count_virtual_fns): Remove.
	* cp-valprint.c (cp_print_hpacc_virtual_table_entries): Remove.
	(hpacc_vtbl_ptr_name, hpacc_vtbl_ptr_type_name): Remove.
	(cp_print_value_fields): Remove support for HP aCC vtables.
	(cp_print_value): Likewise.
	* c-typeprint.c (c_type_print_base): Likewise.
	* value.h (find_rt_vbase_offset): Remove prototype.
	* valops.c (find_rt_vbase_offset): Remove.
	(search_struct_method): Remove support for HP aCC vtables.
	(find_method_list): Likewise.

2013-10-25  Dawn Perchik  <dperchik@embarcadero.com>

	Merge parts of cvs PatchSet 53450 from gdb trunk for wide char support
	(git commit c08468032ed4157cfab377ed62eacb97760b34c2):
	2008-09-11 Ulrich Weigand <uweigand@de.ibm.com>
	* gdbtypes.h (struct builtin_type): Remove builtin_true_char
	and builtin_true_unsigned_char.
	(builtin_type_true_char): Remove macro, add extern declaration.
	(builtin_type_true_unsigned_char): Add extern declaration.
	* gdbtypes.c (builtin_type_true_char): New global variable.
	(builtin_type_true_unsigned_char): Likewise.
	(_initialize_gdbtypes): Initialize them.
	(gdbtypes_post_init): Do not initialize builtin_true_char
	and builtin_true_unsigned_char members of struct builtin_type.
	* printcmd.c (print_scalar_formatted): Do not use builtin_type;
	use builtin_type_true_unsigned_char instead.
	* ada-valprint.c (ada_val_print_1): Use builtin_type_true_char
	instead of builtin_type_char for internal string.

	Merge parts of cvs PatchSet 50645 from gdb trunk for wide char support
	(git commit 31d16dc188e315912e95727399f943280cda7b73):
	2008-03-03  Daniel Jacobowitz  <dan@codesourcery.com>
	* breakpoint.c (watchpoint_value_print): New function.
	(print_it_typical): Use it.  Do not free or clear old_val.  Print
	watchpoints even if old_val == NULL.

	Merge parts of cvs PatchSet 47952 from gdb trunk for wide char support
	(git commit 31d16dc188e315912e95727399f943280cda7b73):
	2007-09-04  Daniel Jacobowitz  <dan@codesourcery.com>
		    Jim Blandy  <jimb@codesourcery.com>
	* NEWS: Update description of string changes.  Mention print/s.
	* c-valprint.c (textual_element_type): New.
	(c_val_print): Use it.  Do not skip address printing for pointers
	with a string format.
	(c_value_print): Doc update.
	* dwarf2read.c (read_array_type): Use make_vector_type.
	* gdbtypes.c (make_vector_type): New.
	(init_vector_type): Use it.
	(gdbtypes_post_init): Initialize builtin_true_unsigned_char.
	(_initialize_gdbtypes): Mark int8_t and uint8_t as TYPE_FLAG_NOTTEXT.
	* gdbtypes.h (struct builtin_type): Add builtin_true_unsigned_char.
	(TYPE_FLAG_NOTTEXT, TYPE_NOTTEXT): New.
	(make_vector_type): New.
	* printcmd.c (print_formatted): Only handle 's' and 'i' for examine.
	Call the language print routine for string format.
	(print_scalar_formatted): Call val_print for string format.  Handle
	unsigned original types for char format.
	(validate_format): Do not reject string format.
	* stabsread.c (read_type): Use make_vector_type.
	* xml-tdesc.c (tdesc_start_vector): Use init_vector_type.

	Merge parts of cvs PatchSet 54128 from gdb trunk for wide char support
	(git commit e0893c5460eb136c8468ddec0623f0d93f43a652):
	2008-10-28  Tom Tromey  <tromey@redhat.com>
	* varobj.c (value_get_print_value): Include valprint.h.
	(value_get_print_value): Use get_formatted_print_options.
	* value.h (struct value_print_options): Declare.
	(value_print, val_print, common_val_print, val_print_string):
	Update.
	* value.c: Include valprint.h.
	(show_values): Use get_user_print_options.
	(show_convenience): Likewise.
	* valprint.h (prettyprint_arrays, prettyprint_structs): Don't
	declare.
	(struct value_print_options): New type.
	(vtblprint, unionprint, addressprint, objectprint, print_max,
	inspect_it, repeat_count_threshold, output_format,
	stop_print_at_null): Don't declare.
	(user_print_options, get_user_print_options,
	get_raw_print_options, get_formatted_print_options): Declare.
	(print_array_indexes_p): Don't declare.
	(maybe_print_array_index, val_print_array_elements): Update.
	* valprint.c (print_max): Remove.
	(user_print_options): New global.
	(get_user_print_options, get_raw_print_options,
	get_formatted_print_options): New functions.
	(print_array_indexes, repeat_count_threshold, stop_print_at_null,
	prettyprint_structs, prettyprint_arrays, unionprint,
	addressprint): Remove.
	(val_print): Remove format, deref_ref, pretty arguments; add
	options.  Update.
	(common_val_print): Likewise.
	(print_array_indexes_p): Remove.
	(maybe_print_array_index): Remove format, pretty arguments; add
	options.  Update.
	(val_print_array_elements): Remove format, deref_ref, pretty
	arguments; add options.  Update.
	(val_print_string): Add options argument.  Update.
	(_initialize_valprint): Use user_print_options.
	(output_format): Remove.
	(set_output_radix_1): Use user_print_options.
	* typeprint.c: Include valprint.h.
	(objectprint): Don't declare.
	(whatis_exp): Use get_user_print_options.
	* tui/tui-regs.c: Include valprint.h.
	(tui_register_format): Use get_formatted_print_options.
	* tracepoint.c: Include valprint.h.
	(addressprint): Don't declare.
	(trace_mention): Use get_user_print_options.
	(tracepoints_info): Likewise.
	* stack.c (print_frame_args): Use get_raw_print_options.
	(print_frame_info): Use get_user_print_options.
	(print_frame): Likewise.
	* sh64-tdep.c: Include valprint.h
	(sh64_do_register): Use get_formatted_print_options.
	* scm-valprint.c (scm_inferior_print): Remove format, deref_ref,
	pretty arguments; add options.
	(scm_scmlist_print): Likewise.  Update.
	(scm_scmval_print): Likewise.
	(scm_val_print): Likewise.
	(scm_value_print): Remove format, pretty arguments; add options.
	Update.
	* scm-lang.h (scm_value_print, scm_val_print, scm_scmval_print):
	Update.
	* scm-lang.c (scm_printstr): Add options argument.
	* python/python-value.c: Include valprint.h.
	(valpy_str): Use get_user_print_options.
	* printcmd.c: Include valprint.h.
	(addressprint): Don't declare.
	(inspect_it): Remove.
	(print_formatted): Remove format option; add options.  Update.
	(print_scalar_formatted): Likewise.
	(print_address_demangle): Use get_user_print_options.
	(do_examine): Use get_formatted_print_options.
	(print_command_1): Likewise.
	(output_command): Use get_formatted_print_options.
	(do_one_display): Likewise.
	(print_variable_value): Use get_user_print_options.
	* p-valprint.c (pascal_val_print): Remove format, deref_ref,
	pretty arguments; add options.  Update.
	(pascal_value_print): Remove format, pretty arguments; add
	options.  Update.
	(vtblprint, objectprint): Don't declare.
	(pascal_static_field_print): Remove.
	(pascal_object_print_value_fields): Remove format, pretty
	arguments; add options.  Update.
	(pascal_object_print_static_field): Likewise.
	(_initialize_pascal_valprint): Use user_print_options.  Update.
	* p-lang.h (pascal_val_print, pascal_value_print,
	pascal_printstr, pascal_object_print_value_fields): Update.
	(vtblprint, static_field_print): Don't declare.
	* p-lang.c (pascal_printstr): Add options argument.  Update.
	* objc-lang.c (objc_printstr): Add options argument.  Update.
	* mt-tdep.c: Include valprint.h.
	(mt_registers_info): Use get_raw_print_options.
	* mips-tdep.c: Include valprint.h.
	(mips_print_fp_register): Use get_formatted_print_options.
	(mips_print_register): Likewise.
	* mi/mi-main.c: Include valprint.h.
	(get_register): Use get_user_print_options.
	(mi_cmd_data_evaluate_expression): Likewise.
	(mi_cmd_data_read_memory): Use get_formatted_print_options.
	* mi/mi-cmd-stack.c: Include valprint.h.
	(list_args_or_locals): Use get_raw_print_options.
	* m2-valprint.c (print_function_pointer_address): Add addressprint
	argument.
	(m2_print_long_set): Remove format, pretty arguments.
	(m2_print_unbounded_array): Remove format, deref_ref, pretty
	arguments; add options.  Update.
	(print_unpacked_pointer): Remove format argument; add options.
	Now static.  Update.
	(print_variable_at_address): Remove format, deref_ref, pretty
	arguments; add options.  Update.
	(m2_print_array_contents): Likewise.
	(m2_val_print): Likewise.
	* m2-lang.h (m2_val_print): Update.
	* m2-lang.c (m2_printstr): Add options argument. Update.
	* language.h (struct value_print_options): Declare.
	(struct language_defn) <la_printstr>: Add options argument.
	<la_val_print>: Remove format, deref_ref, pretty argument; add
	options.
	<la_value_print>: Remove format, pretty arguments; add options.
	<la_print_array_index>: Likewise.
	(LA_VAL_PRINT, LA_VALUE_PRINT, LA_PRINT_STRING,
	LA_PRINT_ARRAY_INDEX): Update.
	(default_print_array_index): Update.
	* language.c (default_print_array_index): Remove format, pretty
	arguments; add options.  Update.
	(unk_lang_printstr): Add options argument.
	(unk_lang_val_print): Remove format, deref_ref, pretty arguments;
	add options.
	(unk_lang_value_print): Remove format, pretty arguments; add
	options.
	* jv-valprint.c (java_value_print): Remove format, pretty
	arguments; add options.  Update.
	(java_print_value_fields): Likewise.
	(java_val_print): Remove format, deref_ref, pretty arguments; add
	options.  Update.
	* jv-lang.h (java_val_print, java_value_print): Declare.
	* infcmd.c: Include valprint.h.
	(print_return_value): Use get_raw_print_options.
	(default_print_registers_info): Use get_user_print_options,
	get_formatted_print_options.
	(registers_info): Use get_formatted_print_options.
	* gdbtypes.h (struct value_print_options): Declare.
	(print_scalar_formatted): Update.
	* f-valprint.c (f77_print_array_1): Remove format, deref_ref,
	pretty arguments; add options.  Update.
	(f77_print_array): Likewise.
	(f_val_print): Likewise.
	* f-lang.h (f_val_print): Update.
	* f-lang.c (f_printstr): Add options argument.  Update.
	(c_value_print): Update declaration.
	* expprint.c: Include valprint.h.
	(print_subexp_standard): Use get_raw_print_options,
	get_user_print_options.
	* eval.c: Include valprint.h.
	(objectprint): Don't declare.
	(evaluate_subexp_standard): Use get_user_print_options.
	* cp-valprint.c (vtblprint, objectprint, static_field_print):
	Remove.
	(cp_print_value_fields): Remove format, pretty arguments; add
	options.  Update.
	(cp_print_value): Likewise.
	(cp_print_static_field): Likewise.
	(_initialize_cp_valprint): Use user_print_options.  Update.
	* c-valprint.c (print_function_pointer_address): Add addressprint
	argument.
	(c_val_print): Remove format, deref_ref, pretty arguments; add
	options.  Update.
	(c_value_print): Add options argument.  Update.
	* c-lang.h (c_val_print, c_value_print, c_printstr): Update.
	(vtblprint, static_field_print): Don't declare.
	(cp_print_value_fields): Update.
	* c-lang.c (c_printstr): Add options argument.  Update.
	* breakpoint.c: Include valprint.h.
	(addressprint): Don't declare.
	(watchpoint_value_print): Use get_user_print_options.
	(print_one_breakpoint_location): Likewise.
	(breakpoint_1, print_it_catch_fork, print_it_catch_vfork, mention,
	print_exception_catchpoint): Likewise.
	* auxv.c (fprint_target_auxv): Don't declare addressprint.  Use
	get_user_print_options.
	* ada-valprint.c (struct ada_val_print_args): Remove format,
	deref_ref, and pretty; add options.
	(print_optional_low_bound): Add options argument.
	(val_print_packed_array_elements): Remove format and pretty
	arguments; add options.  Update.
	(printstr): Add options argument.  Update.
	(ada_printstr): Likewise.
	(ada_val_print): Remove format, deref_ref, pretty arguments; add
	options argument.  Update.
	(ada_val_print_stub): Update.
	(ada_val_print_array): Remove format, deref_ref, pretty arguments;
	add options.  Update.
	(ada_val_print_1): Likewise.
	(print_variant_part): Likewise.
	(ada_value_print): Remove format, pretty arguments; add options.
	Update.
	(print_record): Likewise.
	(print_field_values): Likewise.
	* ada-lang.h (ada_val_print, ada_value_print, ada_printstr):
	Update.
	* ada-lang.c (ada_print_array_index): Add options argument; remove
	format and pretty arguments.
	(print_one_exception): Use get_user_print_options.

2013-10-24  Dawn Perchik  <dperchik@embarcadero.com>

	* mi/mi-cmd-stack.c (print_syms_for_block): Fix indentation.

2013-10-24  Dawn Perchik  <dperchik@embarcadero.com>

	Merge cvs PatchSet 51659 from gdb trunk for wide char support
	(git commit f37c38e384f25dd3d6dc22abbefa6d55c08e55cc):
	2008-05-06  Joel Brobecker  <brobecker@adacore.com>
	* valprint.c (val_print): Add new language parameter and use it
	instead of using the current_language. Update calls to val_print
	throughout.
	(common_val_print): Add new langauge parameter and pass it to
	val_print.
	* value.h (struct language_defn): Add opaque declaration.
	(val_print, common_val_print): Update declarations.
	* stack.c (print_frame_args): Update call to common_val_print
	using the appropriate language.
	* mi/mi-cmd-stack.c (list_args_or_locals): Likewise.
	* c-valprint, f-valprint.c, m2-valprint.c, mt-tdep.c, infcmd.c,
	mi/mi-main.c, jv-valprint.c, ada-valprint.c, varobj.c, p-valprint.c,
	scm-valprint.c, cp-valprint.c, sh64-tdep.c, printcmd.c:
	#include "language.h" if necessary.
	Update calls to val_print and common_val_print.
	* Makefile.in (mt-tdep.o, sh64-tdep.o, mi-cmds.o, mi-main.o):
	Update dependencies.

2013-10-24  Dawn Perchik  <dperchik@embarcadero.com>

	Merge cvs PatchSet 38134 from gdb trunk for wide char support
	(git commit 6f7eee283489ed7e6466d5d17638517e48611631):
	2005-10-03  Joel Brobecker  <brobecker@adacore.com>
	* language.h (language_defn): New field la_print_array_index.
	(LA_PRINT_ARRAY_INDEX): New macro.
	(default_print_array_index): Add declaration.
	* language.c (default_print_array_index): new function.
	(unknown_language): Add value for new field.
	(auto_language): Likewise.
	(local_language): Likewise.
	* ada-lang.c (ada_print_array_index): New function.
	(ada_language_defn): Add value for new field.
	* c-lang.c (c_language_defn): Likewise.
	(cpluc_language_defn): Likewise.
	(asm_language_defn): Likewise.
	(minimal_language_defn): Likewise.
	* f-lang.c (f_language_defn): Likewise.
	* jv-lang.c (java_language_defn): Likewise.
	* m2-lang.c (m2_language_defn): Likewise.
	* objc-lang.c (objc_language_defn): Likewise.
	* p-lang.c (pascal_language_defn): Likewise.
	* scm-lang.c (scm_language_defn): Likewise.
	* valprint.h (print_array_indexes_p): Add declaration.
	(get_array_low_bound): Add declaration.
	(maybe_print_array_index): Add declaration.
	* valprint.c (print_array_indexes): New static variable.
	(show_print_array_indexes): New function.
	(print_array_indexes_p): New function.
	(get_array_low_bound): New function.
	(maybe_print_array_index): New function.
	(val_print_array_elements): Print the index of each element if
	requested by the user.
	(_initialize_valprint): Add new array-indexes "set/show print" command.
	* ada-valprint.c (print_optional_low_bound): Replace extracted code
	by call to ada_get_array_low_bound_and_type(). Stop printing the low
	bound if indexes will be printed for all elements of the array.
	(val_print_packed_array_elements): Print the index of each element
	of the array if necessary.

2013-10-23  Dawn Perchik  <dperchik@embarcadero.com>

	* valops.c (check_field_in): return 1 if name is a property.

2013-10-22  Dawn Perchik  <dperchik@embarcadero.com>

	* value.c (coerce_array): cleanup; replace if statements with switch
	statement to be more like gdb 7.3.x. 
	* p-valprint.c (pascal_val_print): improve error messages if unable to
	read Delphi string to be more like gdb 7.3.x. 
	* valops.c (value_coerce_string): fix comment.

2013-10-22  Dawn Perchik  <dperchik@embarcadero.com>

	* p-exp.y: Include TYPENAME in ident token.

2013-10-10  Kirill Lapshin  <Kirill.Lapshin@embarcadero.com>

	* infcall.c: Restore inferior state after failed fCall enabled. 
	* infrun.c: Add additional stop_stack_dummy variable initialization.
	Enable initial inferior state after failed fCall.  Enable several
	fCalls at same bkpt.

2013-10-09  Kirill Lapshin  <Kirill.Lapshin@embarcadero.com>

	TODOs: handle case if exception may be handled in try/except block.
	* infcall.c infrun.c infcmd.c inferior.h infcall.h: Make
	stop_stack_dummy an enum.
	* breakpoint.h: Add STOP_EXCEPTION_HOOK kind of "stack dummy" stop.
	* breakpoint.c (bpstat_what): Check if fCall interrupted by 
	unhandled exception.
	* infcall.c (hand_function_call): Check STOP_EXCEPTION_HOOK stop
	flag and drop fCall.  Handle case where exception raised during fCall
	was left unhandled by debuggee, and fix against whole debug session
	hang.

2013-10-07  Dawn Perchik  <dperchik@embarcadero.com>

	* c-exp.y: If we have a method, set the current_type to its return
	type, in case this is a method call.  Also, don't report an error if
	the field could not be looked up.

2013-10-04  Dawn Perchik  <dperchik@embarcadero.com>

	* p-exp.y: initialize current_method and current_property before
	checking fields.

2013-10-04  Dawn Perchik  <dperchik@embarcadero.com>

	* c-exp.y: Undo implicit dereference of DelphiObject "ptr" members;
	ARC is no longer implemented using wrapper (now part of class).

2013-10-04  Kirill Lapshin  <Kirill.Lapshin@embarcadero.com>

	* stack.c (print_frame): cp_remove_params usage to avoid printing
	argument types in frame info output in CLI mode.

2013-10-03  Dawn Perchik  <dperchik@embarcadero.com>

	* dwarf2read.c (dwarf2_start_subfile): If subfile->name has no
	path, don't compare with the fullname.

2013-09-26  Kirill Lapshin  <Kirill.Lapshin@embarcadero.com>

	* breakpoint.c (set_dbgexcnotify): Use export @DbgExcNotify symbol 
	to set internal bkpt on RTL exception hook. Fix exception processing in
	case of Release build configuration and non-debug RTL DCU's.

2013-09-25  Dawn Perchik  <dperchik@embarcadero.com>

	* p-lang.h, p-lang.c (pascal_main_name): New function.
	* symtab.c (find_main_name): Try pascal_main_name() to see if we can
	find the main function before defaulting to "main".

2013-09-25  Dawn Perchik  <dperchik@embarcadero.com>

	* dwarf2read.c (read_tag_string_type): Add back special case for Delphi;
	it's needed afterall.

2013-09-25  Kirill Lapshin  <Kirill.Lapshin@embarcadero.com>

	* breakpoint.c breakpoint.h (set_dbgexcnotify): Use debug
	System._DbgExcNotify demangled function name instead of mangled.
	Precheck symbol presence added.  Will switch to _DbgExcNotify export
	symbol right after problem with _@DbgExcNotify symbol solved. 
	Currently exception handling will work only in case RTL debug DCUs used.

2013-09-24  Dawn Perchik  <dperchik@embarcadero.com>

	* p-lang.c (pascal_language_arch_info): remove language assert, and
	turn lower bound assertion into a warning.

2013-09-19  Dawn Perchik  <dperchik@embarcadero.com>

	* language.h, language.c (language_lookup_primitive_type_by_code):
	Remove (not used).

2013-09-19  Dawn Perchik  <dperchik@embarcadero.com>

	* dwarf2read.c (read_tag_string_type): Remove special case for Delphi;
	it's not needed.

2013-09-19  Dawn Perchik  <dperchik@embarcadero.com>

	* p-lang.c (pascal_one_char, pascal_printstr, pascal_primitive_types):
	Change code be more like p-lang.c of gdb 7.3.x.

2013-09-18  Dawn Perchik  <dperchik@embarcadero.com>

	* value.h (coerce_string, value_coerce_string): add prototypes.
	* value.c (coerce_array): turn a Delphi string into an array of
	characters by calling value_coerce_string().
	(coerce_string): Call value_coerce_string() for string types.
	(value_primitive_field): Special case strings due to a Dcc
	bug where string members are coming through with DW_AT_bit_size.  
	Don't reset the address after calling value_from_longest().  FIXME:
	this breaks taking the address of string members.
	(value_from_longest): Handle TYPE_CODE_STRING types as
	Delphi strings by dereferencing them and turning them into an array
	of Delphi characters, then set the address to the start of the array.
	* valops.c (value_coerce_string): Turn the string into an array of
	chars starting at the dereferenced address.
	(value_cast_1): Don't allow a Delphi string to be cast to anything
	other than another string, since a Delphi string is actually a pointer
	to struct.
	* valarith.c (value_subscript): Turn a Delphi string into an array of
	characters before indexing (via value_coerce_string()).
	* eval.c (evaluate_subexp_standard): allow subscripting of
	TYPE_CODE_STRING types in case BINOP_SUBSCRIPT.

2013-09-18  Dawn Perchik  <dperchik@embarcadero.com>

	* varobj.c (c_value_of_variable): For TYPE_CODE_ARRAY, always evaluate
	Delphi strings, and return "{...}" instead of "[n]" for other arrays.
	* completer.c (skip_quoted_chars): treat '' as a single ' in Delphi.
	* p-valprint.c (pascal_val_print): For TYPE_CODE_STRING and
	TYPE_CODE_ARRAY, use is_char_type() to determine if the elements are
	characters and should be printed as a string, and handle multi-byte
	characters.  For TYPE_CODE_INT, use is_char_type() to determine if 
	the integer is a character and should be printed as such, and handle
	multi-byte characters.  For TYPE_CODE_CHAR, handle multi-byte
	characters.
	(is_char_type): new: Return TRUE if the element type is a character
	and should be printed as such.  Used to test if an array of chars
	should be  printed with string syntax.  Recognize "N6System8WideCharE"
	or "wchar_t" elements as characters in Delphi.
	(unpack_char): Extract the character type from the buffer and mask it
	to undo any possible sign extensions.  
	* p-exp.y (yylex): Read characters of STRINGs as uint16_t characters.
	Treat '' as the empty single literal.
	Treat '' embeded in a string literal as a single '.
	(exp : STRING): Handle string literals with wide characters.
	(exp : exp '[' exp1 ']'): don't special case strings
	because Dcc doesn't generate the expected field info.

2013-09-18  Dawn Perchik  <dperchik@embarcadero.com>

	* p-lang.c (pascal_language_defn): Use builtin_type_Delphi_char for
	the type of string elements.  Specify pascal_language_arch_info for
	building architecture specific types.
	(pascal_string_lower_bound): Use architecture to determine the string
	lower bound.
	(pascal_create_string_type): Use architecture to build the string type.
	(pascal_create_fundamental_type): Fix the fundamental types to match
	Delphi.
	(pascal_primitive_types): list the builtin types for Pascal.
	(pascal_language_arch_info): Use architecture to build the fundamental
	types.
	(pascal_one_char): Handle multi-byte chars.
	(pascal_printstr): Merge handling of quotes and characters of width > 1
	from gdb 7.3.
	* gdbtypes.h, gdbtypes.c (builtin_type_wchar): Add new builtin type for
	wchar_t as an unsigned integer of 2 bytes.  FIXME: the target should be
	checked for the correct settings.
	Add support for new builtin characters: builtin_type_wchar,
	builtin_type_uchar16, builtin_type_uchar32, builtin_type_Delphi_char.
	* dwarf2read.c (read_file_scope): Set the current language to match
	that of the CU and restore it when done.
	(restore_language): new: restore the saved language during cleanup.
	(read_tag_string_type): Build Delphi's string type as its own
	fundamental type.
	* language.h, language.c (language_lookup_primitive_type_by_code):
	lookup a builtin type using its code.
	(integral_type): unused: recognise Delphi enums as integral types.
	(structured_type): fix indentation.

2013-09-17  Dawn Perchik  <dperchik@embarcadero.com>

	* varobj.c (varobj_create): Don't create a var object if evaluation
	fails.

2013-08-27  Dawn Perchik  <dperchik@embarcadero.com>

	* p-exp.y (yylex): Return STRING for '' and 'xxx'.
	(exp : exp '[' index ']'): Add comment about dereferencing strings.

2013-08-26  Dawn Perchik  <dperchik@embarcadero.com>

	* gdbtypes.c (rank_one_type): Don't allow the passing of integrals
	as pointers.  aeturn return INCOMPATIBLE_TYPE_BADNESS instead of
	POINTER_CONVERSION_BADNESS.

2013-08-23  Dawn Perchik  <dperchik@embarcadero.com>

	* eval.c (evaluate_subexp_standard): Rework namespace support to
	match newer code in gdb 7.3.

2013-08-23  Dawn Perchik  <dperchik@embarcadero.com>

	* eval.c (evaluate_subexp_standard): Get the function address using 
	value_of_variable() instead of locate_var_value() to match newer code
	in gdb 7.3.  Cleanup indentation.

2013-08-23  Dawn Perchik  <dperchik@embarcadero.com>

	* eval.c (evaluate_subexp_standard): Add comment on why overloading
	fails for Delphi method calls.

2013-08-22  Dawn Perchik  <dperchik@embarcadero.com>

	* eval.c (evaluate_subexp_standard): if calling a non-member function,
	handle the case that the function is in a namespace and do overload
	resolution on it.

2013-08-22  Dawn Perchik  <dperchik@embarcadero.com>

	* cp-support.h, cp-support.c: replace calls to cp_demangled_name_to_comp
	and cp_comp_to_string with wrappers which select the appropriate
	function from p-name-parser.y or cp-name-parser.y to call based on 
	the current language.
	FIXME: a better fix would be to build a common version of cp-support
	with vectors to select based on language, but that would require a
	partial rewrite and introduce too much risk.
	(demangled_name_to_comp, comp_to_string):
	wrappers which call cp_demangled_name_to_comp or
	p_demangled_name_to_comp (cp_comp_to_string or p_comp_to_string)
	depending on whether the current language is C++ or pascal.

2013-08-22  Dawn Perchik  <dperchik@embarcadero.com>

	* valops.c (find_oload_champ_namespace_loop): Recognise '.' as the
	namespace separator if the current language is pascal.

2013-08-22  Dawn Perchik  <dperchik@embarcadero.com>

	* p-name-parser.y, Makefile.in: initial support for parsing Delphi
	names, as needed for overload resolution.  Support is originally
	based on C++ with modifications to parse Delphi namespaces (units),
	and will continue to be modified as per the Delphi grammar.

2013-08-22  Kirill Lapshin  <Kirill.Lapshin@embarcadero.com>

	* arm-tdep.h, arm-tdep.c: Backport patch from latest GDB: stepping
	through atomic instruction sequences. Fix for debuggee looping on
	atomic sequences.
	* remote.c: Force software stepping.

2013-08-19  Kirill Lapshin  <Kirill.Lapshin@embarcadero.com>

	* parse.c (parse_exp_in_context): Missing expout->gdbarch
	initialization added. Fix for GDB crash during evaluating expressions
	like "sizeof(Int64)".

2013-08-16  Dawn Perchik  <dperchik@embarcadero.com>

	* c-exp.y: Implicitly dereference DelphiObject "ptr" members to get to
	the real Delphi class.  I.e. Evaluate "obj->fld" as "obj->ptr->fld".

2013-08-14  Kirill Lapshin  <Kirill.Lapshin@embarcadero.com>

	* dwarf2read.c (var_decode_location): Fix for empty values for optimized
	out vars - 0xdeadbeef set in AT_location attr for variables optimized
	out by compiler. We can use this as criteria in addition to size = 0.
	(typename_concat): Fix for type demangling.

2013-08-14  Kirill Lapshin  <Kirill.Lapshin@embarcadero.com>

	* symtab.h minsyms.c: Changes in syms names hashing - fixes Pascal
	case insensitive evaluation for globals.

2013-08-09  Dawn Perchik  <dperchik@embarcadero.com>

	* eval.c (evaluate_subexp_standard): don't call methods if `this'
	pointer is NULL.

2013-08-08  Dawn Perchik  <dperchik@embarcadero.com>

	* cp-valprint.c (cp_print_value_fields),
	* p-valprint.c (pascal_object_print_value_fields): Skip nested
	structure types when displaying contents of a struct.

2013-08-06  Dawn Perchik  <dperchik@embarcadero.com>

	* gdbtypes.h (TYPE_FLAG_DELPHI_CLASS, TYPE_FLAG_DELPHI_RECORD):
	New flags.
	* dwarf2read.c (read_structure_type): If struct has attr
	DW_AT_BORLAND_Delphi_class, set TYPE_FLAG_DELPHI_CLASS.  If struct has
	attr DW_AT_BORLAND_Delphi_record, set TYPE_FLAG_DELPHI_RECORD.
	* c-typeprint.c (c_type_print_base): If TYPE_FLAG_DELPHI_CLASS flag
	is set, print "__declspec(delphiclass)".  If TYPE_FLAG_DELPHI_RECORD
	flag is set, print "__declspec(delphirecord)".

2013-08-06  Dawn Perchik  <dperchik@embarcadero.com>

	* c-exp.y: Add parsing for Borland properties.

2013-08-06  Dawn Perchik  <dperchik@embarcadero.com>

	* value.c, value.h (lookup_only_internalvar):
	Merge in added parsing support from gdb 7.3.
	* parser-defs.h (parse_gdbarch, parse_language):
	Merge in added parsing support from gdb 7.3.
	* expression.h (struct expresion): 
	Merge in added parsing support from gdb 7.3.
	* p-exp.y: Merge in some changes from gdb 7.3:
	- Aadditional fixes for keeping track of current_type.
	- New rule for "SIZEOF '(' exp ')'".
	- Minor coding style changes.
	- Fixes for memory management.
	Report error for unreadble property.
	In rule "variable: name_not_typename '(' arglist ')'", set
	current_type to the type of the method, and move
	push_current_type() to before collecting arguments.  After
	pop_current_type(), reset the type to the return type of the
	method.  Remove assert.

2013-08-01  Dawn Perchik  <dperchik@embarcadero.com>

	* c-typeprint.c (c_type_print_base): Add support for printing
	properties in structs/classes.  Print "__classmethod" if method is
	class method. 

2013-08-01  Dawn Perchik  <dperchik@embarcadero.com>

	* p-exp.y: In rule "exp : exp '.' ident", make sure current_type is
	set after method calls and property evaluations.
	In rule "exp : exp '.' ident '(' arglist ')'", dereference
	current_type before parsing fields.
	In rule "variable : name_not_typename", if is_a_field_of_this, don't
	set current_type to the field until parsing is completed.  Jump to the
	end in case of errors.  Reorder code to fall through to default field
	access code if not a property of method.

2013-08-01  Dawn Perchik  <dperchik@embarcadero.com>

	* p-typeprint.c (pascal_type_print_base): Swap order of property name
	and type in case type is undefined.  Remove redundant check for NULL
	TYPE_TARGET_TYPE (TYPE_FN_FIELD_TYPE (f, j)).

2013-08-01  Dawn Perchik  <dperchik@embarcadero.com>

	* dwarf2read.c (dwarf2_add_prop_field): Allow parent die type to be
	DW_TAG_class_type in addiion to DW_TAG_structure_type.

2013-07-30  Kirill Lapshin  <Kirill.Lapshin@embarcadero.com>

	* varobj.c, valops.c, wrapper.c, p-lang.c:
	Fix GDB crashes on evaluating Self (or any object ptr) child members.

2013-07-30  Kirill Lapshin  <Kirill.Lapshin@embarcadero.com>

	* p-valprint.c (pascal_val_print):
	No predictions for pointer may point to string in case
	of target type is TYPE_CODE_INT.

2013-07-25  Dawn Perchik  <dperchik@embarcadero.com>

	* p-exp.y: After function call, set current_type to function return
	type.  Set precedence of "exp : exp '.' ident" to UNARY.  Fix error
	messages if "self" not found in "variable : name_not_typename" rules.
	* gdbtypes.c (lookup_struct_elt_type, lookup_struct_elt_struct):
	don't report error when recursing on basetypes.

2013-07-24  Kirill Lapshin  <Kirill.Lapshin@embarcadero.com>

	* p-valprint.c (pascal_val_print): Fix for Pascal NIL pointers print.

2013-07-23  Kirill Lapshin  <Kirill.Lapshin@embarcadero.com>

	* regcache.c, remote.c (remote_wait): Fix for iOS 7.x RSP protocol 
	compatibility issue. Tested on device with iOS 7.0 Beta 3 installed.

2013-07-22  Dawn Perchik  <dperchik@embarcadero.com>

	* p-exp.y: Modify rule "variable : name_not_typename" condition
	$1.is_a_field_of_this, to add implicit "self" support for properties
	and parameterless methods.
	Add rule "variable : name_not_typename '(' arglist ')'" to add implicit
	"self" support for methods.

2013-07-22  Dawn Perchik  <dperchik@embarcadero.com>

	* Fix "self" (and implicit "self") member access.
	Note: implicit "self" not yet working for properties/methods.
	* valops.c (value_of_this): if (language_pascal), lookup "self".
	* eval.c (evaluate_subexp_standard): case OP_THIS:
	if (language_pascal), try to lookup "self" first.
	* p-exp.y (name_not_typename): add IDENT.
	(yylex): if we were unable to look up a symbol, try looking up "self".
	If the field is a member of "self"'s type, set is_a_field_of_this=1.

2013-07-22  Dawn Perchik  <dperchik@embarcadero.com>

	* p-exp.y: Add new token ident.  Add rule to get ident from NAME.
	Replace IDENT with ident in field access rules, so that NAMEs can
	be used in class member evaluation by the rule "exp : exp '.' ident".
	Fixes evaluation of "p self.value".

2013-07-22  Dawn Perchik  <dperchik@embarcadero.com>

	* p-exp.y: Use token IDENT to represent an identifier string.  
	Remove obsolete token FIELDNAME.  Fixes regression in method calls
	caused by previous change from name to FIELDNAME.
	(yylex): if (!sym && current_type), return token IDENT.  Remove
	obsolete code for case sensitivity.

2013-07-19  Dawn Perchik  <dperchik@embarcadero.com>

	* value.h (METHOD_FLAG_STATIC): new: Flag for static method.
	(METHOD_FLAG_CLASSMETHOD): new: Flag for Delphi class method.
	* p-typeprint.c (pascal_type_print_base): Print "class" if method
	is a class method.
	* gdbtypes.h (struct feld): Add new bitfield flag metaclass.
	(struct fn_fieldlist): Add new bitfield flag is_metaclass.
	* dwarf2read.c (dwarf2_add_member_fn): Set is_metaclass flag if param
	has DW_AT_BORLAND_Delphi_metaclass attribute.
	(read_subroutine_type): Set metaclass flag if param has
	DW_AT_BORLAND_Delphi_metaclass attribute.
	* eval.c (evaluate_subexp_standard): If method is a Delphi class
	method, don't call it. 
	* valops.c (oload_method_flag): new: Return method flag.
	(search_struct_method, value_struct_elt, value_struct_elt_as_lval,
	find_overload_match): Change "is_static" param to return either
	METHOD_FLAG_STATIC or METHOD_FLAG_CLASSMETHOD.

2013-07-17  Dawn Perchik  <dperchik@embarcadero.com>

	* p-exp.y: Restrict field evaluation to FIELDNAME instead
	of name.  This fixes regression caused by consuming everything to the
	right of '.' as part of the name.  This broke evaluation of expressions
	like "x.y - 1".  

2013-07-15  Dawn Perchik  <dperchik@embarcadero.com>

	* gdbtypes.h, gdbtypes.c (lookup_struct_elt_struct,
	lookup_struct_elt_fn_field, lookup_struct_elt_prop_field,
	error_unknown_struct_elt): new: functions callable by p-exp.y to
	support evaluation of methods and properties.
	* p-exp.y (grammar): added parsing rules for:
	    exp : exp '.' name
	    exp : exp '.' name '('arglist ')'
	removed obsolete rule:
	    exp : exp '.' FIELDNAME
	changed rule arglist to make it more like c-exp.y.
	* p-exp.y (yylex): removed obsolete test for (search_field && current_type).

2013-07-15  Dawn Perchik  <dperchik@embarcadero.com>

	* dwarf2read.c: Enable language extentions which apply to Delphi.

2013-07-15  Dawn Perchik  <dperchik@embarcadero.com>

	* gdbtypes.c, gdbtypes.h, dwarf2read.c (struct prop_field): Remove
	unused property read/write fields "fieldptr" and "fnfieldptr".

2013-07-12  Dawn Perchik  <dperchik@embarcadero.com>

	* p-typeprint.c (pascal_type_print_base): Dump properties.

2013-07-12  Dawn Perchik  <dperchik@embarcadero.com>

	* p-lang.h, p-typeprint.c: Dump arguments from the function type,
	not the mangled name.

2013-07-08  Dawn Perchik  <dperchik@embarcadero.com>

	* value.h, valops.c, expression.h, gdbtypes.c, gdbtypes.h,
	dwarf2read.c, eval.c, parse.c: Add support for evaluating
	Delphi properties.

2013-07-08  Dawn Perchik  <dperchik@embarcadero.com>

	* p-exp.c: Add support for parsing Delphi properties.

2013-07-08  Dawn Perchik  <dperchik@embarcadero.com>

	* dwarf2read.c, ../include/elf/dwarf2.h: Add support for Dwarf
	extensions.

2013-07-02  Dawn Perchik  <dperchik@embarcadero.com>

	* p-lang.c (is_pascal_string_type): Fix possible NULL reference in
	strcmp when type name is 0.

2013-06-11  Kirill Lapshin  <Kirill.Lapshin@embarcadero.com>

	* p-exp.y, cp-namespace.c: experimental fCall enabled back after compiler
	was adopted for producing DW_TAG_namespace tag. Fully qualified name
	must be used: <namespace>.<function name>(<arglist>)

2013-05-15  Dawn Perchik  <dperchik@embarcadero.com>

	* stack.c (frame_info): Make similar fix to make_cleanup() call
	as was done to print_frame(), that is, don't overwrite old_cleanups.

2013-05-15  Kirill Lapshin  <Kirill.Lapshin@embarcadero.com>

	* breakpoint.c, dwarf2read.c, symtab.c, p-valprint.c: Cleanup unused/test code.

2013-05-15  Kirill Lapshin  <Kirill.Lapshin@embarcadero.com>

	* stack.c (print_frame): Fix crash regression since previous commit.

2013-05-14  Dawn Perchik  <dperchik@embarcadero.com>

	* stack.c (print_frame, frame_info): Make sure any pointers returned
	from cplus_demangle() get cleaned up.

2013-05-14  Dawn Perchik  <dperchik@embarcadero.com>

	* p-typeprint.c (pascal_type_print_base): Free pointers returned from
	cplus_demangle().

2013-05-08  Dawn Perchik  <dperchik@embarcadero.com>

	* COPYING, top.c: replace with GPLv3 version and update banner,
	since newer code was ported from GPLv3 version of gdb.

2013-04-09  Dawn Perchik  <dperchik@embarcadero.com>

	* cp-support.c, cp-support.h, defs.h, language.c, p-lang.c, symtab.c,
	utils.c: Case-insensitive evaluation for Pascal language. Backport from
	GDB 7.2.

2013-04-08  Kirill Lapshin  <Kirill.Lapshin@embarcadero.com>

	* infcmd.c: debughook_enable variable, default=0.
	Valid values: 1(hook enabled)/0(hook disabled).

2013-04-08  Kirill Lapshin  <Kirill.Lapshin@embarcadero.com>

	* p-typeprint.c, breakpoint.c, breakpoint.h, dwarf2read.c, infcmd.c,
	linespec.c, linespec.h (System._DbgExcNotify): hook, set by hook name.

2013-04-04  Dawn Perchik  <dperchik@embarcadero.com>

	* linespec.h, linespec.c (decode_all_digits_exhaustive): Add
	find_all_occurrences parameter.  If set, don't skip additional line
	entries for the line.
	* breakpoint.c (parse_breakpoint_sals): Pass find_all_occurrences==1
	to decode_line_1() to force setting breakpoints on all address of a
	line to work-around the case where we have a line which spans more than
	one code range.

2013-04-02  Kirill Lapshin  <Kirill.Lapshin@embarcadero.com>

	* linespec.c (decode_all_digits_exhaustive): Set line breakpoint only
	in case if exact line resolvable to address.

2013-03-27  Kirill Lapshin  <Kirill.Lapshin@embarcadero.com>

	* p-valprint.c (pascal_val_print): Fix trailing zeroes issue for
	Currency type evaluation.

2013-03-27  Kirill Lapshin  <Kirill.Lapshin@embarcadero.com>

	* source.c (line_info): Support for -data-info-line MI command - MI
	analogue of CLI "info line".

2013-03-26  Kirill Lapshin  <Kirill.Lapshin@embarcadero.com>

	* disasm.c, dwarf2read.c printcmd.c symfile.c symtab.c: Mangled
	function names in disassembly - fixed. Setting breakpoint on fully
	qualified demangled function name enabled. Preparations for enabling
	fCall with uisng fully qualified function name (i.e. Project1.foo()).

2013-03-21  Kirill Lapshin  <Kirill.Lapshin@embarcadero.com>

	* valarith.c (value_binop), p-valprint.c (pascal_val_print): Currency
	type evaluation enabled.

2013-03-20  Kirill Lapshin  <Kirill.Lapshin@embarcadero.com>

	* disasm.c (dump_insns): dumped insn size (in bytes) field added.

2013-03-19  Kirill Lapshin  <Kirill.Lapshin@embarcadero.com>

	* dwarf2read.c (dwarf2_get_pc_bounds): Workaround for AT_low/high_pc
	attribute set as 0xdeadbeef (dSYM problem). 

2013-03-19  Kirill Lapshin  <Kirill.Lapshin@embarcadero.com>

	* p-valprint.c (pascal_val_print): Fix evaluation results string for
	nil or partly initialized String.  Now shown as '' or as Inaccesible
	value.

2013-03-18  Kirill Lapshin  <Kirill.Lapshin@embarcadero.com>

	* p-valprint.c (pascal_val_print): Fix evaluation results string for
	empty String.

2013-03-18  Kirill Lapshin  <Kirill.Lapshin@embarcadero.com>

	* p-valprint.c (pascal_val_print): Fix for GDB hang on allocated but
	not initialized String.

2013-03-15  Kirill Lapshin  <Kirill.Lapshin@embarcadero.com>

	* p-valprint.c (pascal_val_print): String evaluation enabled for
	UString/AnsiString String types.

2013-03-13  Kirill Lapshin  <Kirill.Lapshin@embarcadero.com>

	* p-valprint.c (pascal_val_print): TYPE_CODE_STRING recognition added.

2013-03-05  Kirill Lapshin  <Kirill.Lapshin@embarcadero.com>

	* varobj.c (c_variable_editable): Fix for GDB crash if variable type
	struct ptr is NULL. Other problems may appear, but no crash at least.

2013-02-20  Kirill Lapshin  <Kirill.Lapshin@embarcadero.com>

	* dwarf2read.c (read_partial_die): Fix for GDB crash if part_die->name
	is NULL. Other problems may appear, but no crash at least.

2013-02-18  Kirill Lapshin  <Kirill.Lapshin@embarcadero.com>

	* dwarf2read.c (dwarf2_start_subfile): Fix for problem with comp_dir
	vs written dirname mismatch issue - only for crosscompiled Delphi-ARM
	programs.

2013-01-18  Kirill Lapshin  <Kirill.Lapshin@embarcadero.com>

	* stack.c, symfile.c: DPR files means pascal language.  Delphi/pascal
	function names demangling on callstack added.  Preparations for type
	names demangling.

2013-01-18  Gleb Gagarin <Gleb.Gagarin@embarcadero.com>

	* gdbtypes.h, value.c, dwarf2read.c, p-valprint.c, valarith.c:
	Implemented DW_AT_decimal_scale DWARF attribute support for scaled 
	integer variables and very basic support for computations on them.
